#!/usr/bin/env python

"""
legacyhalos-results --clobber

Gather all the results into a single multi-extension FITS file.

"""
from __future__ import print_function, division

import os, argparse, pdb
import numpy as np
from astropy.table import Table, Column
import legacyhalos.io

def _init_sersic(ngal=1, mem_match_id=0, modeltype='single', band=('g', 'r', 'z'),
                 nowavepower=True):
    if modeltype == 'single':
        params = ('alpha', 'beta', 'nref', 'r50ref', 'mu50_g', 'mu50_r', 'mu50_z')
    elif modeltype == 'exponential':
        params = ('alpha1', 'beta1', 'beta2', 'nref1', 'nref2', 'r50ref1', 'r50ref2',
                  'mu50_g1', 'mu50_r1', 'mu50_z1', 'mu50_g2', 'mu50_r2', 'mu50_z2')
    elif modeltype == 'double':
        params = ('alpha1', 'alpha2', 'beta1', 'beta2', 'nref1', 'nref2', 'r50ref1', 'r50ref2',
                  'mu50_g1', 'mu50_r1', 'mu50_z1', 'mu50_g2', 'mu50_r2', 'mu50_z2')

    out = Table()
    out.add_column(Column(name='mem_match_id', data=np.zeros(ngal).astype(np.int32)))
    out.add_column(Column(name='success', data=np.zeros(ngal).astype(np.bool_)))
    out.add_column(Column(name='converged', data=np.zeros(ngal).astype(np.bool_)))
    for param in params:
        out.add_column(Column(name=param, data=np.zeros(ngal).astype('f4')))
        out.add_column(Column(name='{}_err'.format(param), data=np.zeros(ngal).astype('f4')))

    [out.add_column(Column(name='flux_obs_{}'.format(bb), data=np.zeros(ngal).astype('f4'))) for bb in band]
    [out.add_column(Column(name='flux_{}'.format(bb), data=np.zeros(ngal).astype('f4'))) for bb in band]
    [out.add_column(Column(name='dm_in_{}'.format(bb), data=np.zeros(ngal).astype('f4'))) for bb in band]
    [out.add_column(Column(name='dm_out_{}'.format(bb), data=np.zeros(ngal).astype('f4'))) for bb in band]
    [out.add_column(Column(name='dm_{}'.format(bb), data=np.zeros(ngal).astype('f4'))) for bb in band]

    out['mem_match_id'] = mem_match_id

    return out
    
def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--first', type=int, help='Index of first object to process.')
    parser.add_argument('--last', type=int, help='Index of last object to process.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite an existing file.')
    parser.add_argument('--quiet', action='store_true', help='Be (more) quiet.')
    args = parser.parse_args()

    verbose = not args.quiet

    # Read the sample
    sample = legacyhalos.io.read_sample(first=args.first, last=args.last, verbose=verbose)
    ngal = len(sample)

    chi2fail = 1e6

    # Initialize the top-level output table
    results = sample.copy()[['mem_match_id']]
    results.add_column(Column(name='ellipse', data=np.repeat(0, ngal).astype(np.bool_)))
    for wavepower in ('-nowavepower', ''):
        for modeltype in ('single', 'exponential', 'double'):
            colname = 'chi2_sersic_{}{}'.format(modeltype, wavepower).replace('-', '_')
            results.add_column(Column(name=colname, data=np.repeat(chi2fail, ngal).astype('f4')))
    
    allobjid, allobjdir = legacyhalos.io.get_objid(sample)

    sersic_single = _init_sersic(ngal, mem_match_id=sample['mem_match_id'].data, modeltype='single')
    sersic_double = _init_sersic(ngal, mem_match_id=sample['mem_match_id'].data, modeltype='double')
    sersic_exponential = _init_sersic(ngal, mem_match_id=sample['mem_match_id'].data, modeltype='exponential')

    sersic_single_nowavepower = _init_sersic(ngal, modeltype='single')
    sersic_double_nowavepower = _init_sersic(ngal, modeltype='double')
    sersic_exponential_nowavepower = _init_sersic(ngal, modeltype='exponential')
    
    for ii, (objid, objdir) in enumerate( zip(np.atleast_1d(allobjid), np.atleast_1d(allobjdir)) ):

        ellipsefit = legacyhalos.io.read_ellipsefit(objid, objdir, verbose=verbose)
        if bool(ellipsefit):
            if ellipsefit['success']:
                results['ellipse'][ii] = 1

        # Sersic modeling
        for wavepower in ('-nowavepower', ''):
            for modeltype in ('single', 'exponential', 'double'):
                modelname = '{}{}'.format(modeltype, wavepower)
                colname = 'sersic_{}'.format(modelname).replace('-', '_')
            
                sersic = legacyhalos.io.read_sersic(objid, objdir, model=modelname, verbose=verbose)
                if bool(sersic):
                    results['chi2_{}'.format(colname)][ii] = sersic['chi2']

                    data = locals()[colname]
                    data['success'][ii] = sersic['success']
                    data['converged'][ii] = sersic['converged']
                    for param in sersic['params']:
                        data[param][ii] = sersic[param]
                        data['{}_err'.format(param)][ii] = sersic['{}_err'.format(param)]
                    if sersic['success']:
                        for col in sersic['phot'].colnames:
                            data[col][ii] = sersic['phot'][col]
                        
                    locals()[colname] = data
                    
    # Write out summary statistics
    if verbose:
        print('Summary statistics:')
        print('  Number of galaxies: {} '.format(ngal))
        print('  Ellipse-fitting: {}/{} ({:.1f}%) '.format(
            np.sum(results['ellipse']), ngal, 100*np.sum(results['ellipse'])/ngal))
        for wavepower in ('-nowavepower', ''):
            for modeltype in ('single', 'exponential', 'double'):
                modelname = '{}{}'.format(modeltype, wavepower)
                colname = 'chi2_sersic_{}'.format(modelname).replace('-', '_')
                ndone = np.sum(results[colname] < chi2fail)
                fracdone = 100 * ndone / ngal
                print('  {}: {}/{} ({:.1f}%) '.format(modelname, ndone, ngal, fracdone))
    #print(results)

    # Write out
    legacyhalos.io.write_results(results, clobber=args.clobber, sersic_single=sersic_single,
                                 sersic_double=sersic_double, sersic_exponential=sersic_exponential,
                                 sersic_single_nowavepower=sersic_single_nowavepower,
                                 sersic_double_nowavepower=sersic_double_nowavepower,
                                 sersic_exponential_nowavepower=sersic_exponential_nowavepower,
                                 verbose=verbose)

if __name__ == '__main__':
    main()
