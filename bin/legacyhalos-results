#!/usr/bin/env python

"""
legacyhalos-results --clobber

Gather all the results into a single multi-extension FITS file.

"""
from __future__ import print_function, division

import os, argparse, pdb
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table, Column, hstack

import legacyhalos.io
from legacyhalos.qa import display_sersic

band = ('g', 'r', 'z')

def _init_phot(ngal=1):

    phot = Table()
    [phot.add_column(Column(name='flux_obs_{}'.format(bb), dtype='f4', length=1)) for bb in band]
    [phot.add_column(Column(name='flux_obs_ivar_{}'.format(bb), dtype='f4', length=1)) for bb in band]

    [phot.add_column(Column(name='flux_{}'.format(bb), dtype='f4', length=1)) for bb in band]
    [phot.add_column(Column(name='flux_ivar_{}'.format(bb), dtype='f4', length=1)) for bb in band]

    [phot.add_column(Column(name='dm_in_{}'.format(bb), dtype='f4', length=1)) for bb in band]
    [phot.add_column(Column(name='dm_out_{}'.format(bb), dtype='f4', length=1)) for bb in band]
    [phot.add_column(Column(name='dm_{}'.format(bb), dtype='f4', length=1)) for bb in band]

    return phot

def _init_sersic(ngal=1, mem_match_id=0, modeltype='single', nowavepower=True):

    if modeltype == 'single':
        params = ('alpha', 'beta', 'nref', 'r50ref', 'mu50_g', 'mu50_r', 'mu50_z')
    elif modeltype == 'exponential':
        params = ('alpha1', 'beta1', 'beta2', 'nref1', 'nref2', 'r50ref1', 'r50ref2',
                  'mu50_g1', 'mu50_r1', 'mu50_z1', 'mu50_g2', 'mu50_r2', 'mu50_z2')
    elif modeltype == 'double':
        params = ('alpha1', 'alpha2', 'beta1', 'beta2', 'nref1', 'nref2', 'r50ref1', 'r50ref2',
                  'mu50_g1', 'mu50_r1', 'mu50_z1', 'mu50_g2', 'mu50_r2', 'mu50_z2')

    out = Table()
    out.add_column(Column(name='mem_match_id', data=np.zeros(ngal).astype(np.int32)))
    out.add_column(Column(name='success', data=np.zeros(ngal).astype(np.bool_)))
    out.add_column(Column(name='converged', data=np.zeros(ngal).astype(np.bool_)))
    for param in params:
        out.add_column(Column(name=param, data=np.zeros(ngal).astype('f4')))
        out.add_column(Column(name='{}_err'.format(param), data=np.zeros(ngal).astype('f4')))

    phot = _init_phot(ngal)
    out = hstack( (out, phot) )

    out['mem_match_id'] = mem_match_id

    return out

def sersic_integrate(sersic, nrad=50, debug=False):
    """Integrate the data and the model to get the final photometry.

    flux_obs_[grz] : observed integrated flux
    flux_int_[grz] : integrated (extrapolated) flux
    deltamag_in_[grz] : flux extrapolated inward
    deltamag_out_[grz] : flux extrapolated outward
    deltamag_[grz] : magnitude correction between flux_obs_[grz] and flux_int_[grz] or
      deltamag_in_[grz] + deltamag_out_[grz]

    """
    from scipy import integrate
    from astropy.table import Table, Column

    phot = _init_phot(ngal=1)
    bestfit = sersic['bestfit']
    allradius, allwave, allsb, allsberr = sersic['radius'], sersic['wave'], sersic['sb'], sersic['sberr']

    for filt, lam in zip( band, (sersic['lambda_g'], sersic['lambda_r'], sersic['lambda_z']) ):
        #wave = np.repeat(lam, nrad)
        indx = (allwave == lam) * np.isfinite(allsb) * (allsb > 0)

        radius = allradius[indx] # [arcsec]
        sb = allsb[indx]
        sberr = allsberr[indx]

        obsflux = 2 * np.pi * integrate.simps(x=radius, y=radius*sb)
        obsvar = 2 * np.pi * integrate.simps(x=radius, y=radius*sberr**2)

        phot['flux_obs_{}'.format(filt)] = obsflux
        if obsvar > 0:
            phot['flux_obs_ivar_{}'.format(filt)] = 1 / obsvar

        if debug:
            display_sersic(sersic)

        pdb.set_trace()

        # now integrate inward and outward by evaluating the model
        rad_in = np.linspace(0, rad.min(), nrad)
        sb_in = bestfit(rad_in, wave) # no-convolution!!!
        dm_in = 2 * np.pi * integrate.simps(x=rad_in, y=rad_in*sb_in)

        #rad_out = np.logspace(np.log10(rad.max()), 3, nrad)
        rad_out = np.linspace(rad.max()*0.7, 200, 150) # nrad)
        sb_out = bestfit(rad_out, wave)
        dm_out = 2 * np.pi * integrate.simps(x=rad_out, y=rad_out*sb_out)

        #plt.errorbar(rad, 22.5-2.5*np.log10(sb), 2.5*sberr/sb/np.log(10))
        #plt.plot(rad_in, 22.5-2.5*np.log10(sb_in)) ; plt.scatter(rad_out, 22.5-2.5*np.log10(sb_out))
        #plt.ylim(32, 15) ; plt.xlim(0, 30)
        #plt.show()
        #pdb.set_trace()

        dm = dm_in + dm_out
        phot['flux_{}'.format(filt)] = phot['flux_obs_{}'.format(filt)] + dm
        phot['flux_ivar_{}'.format(filt)] = phot['flux_obs_ivar_{}'.format(filt)] + dm

        phot['dm_in_{}'.format(filt)] = - 2.5 * np.log10(1 - dm_in / obsflux)
        phot['dm_out_{}'.format(filt)] = - 2.5 * np.log10(1 - dm_out / obsflux)
        phot['dm_{}'.format(filt)] = - 2.5 * np.log10(1 - dm / obsflux)

    return phot

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--first', type=int, help='Index of first object to process.')
    parser.add_argument('--last', type=int, help='Index of last object to process.')
    parser.add_argument('--debug', action='store_true', help='Render a debuggin plot.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite an existing file.')
    parser.add_argument('--quiet', action='store_true', help='Be (more) quiet.')
    args = parser.parse_args()

    verbose = not args.quiet

    # Read the sample
    sample = legacyhalos.io.read_sample(first=args.first, last=args.last, verbose=verbose)
    ngal = len(sample)

    chi2fail = 1e6

    # Initialize the top-level output table
    results = sample.copy()[['mem_match_id']]
    #results.add_column(Column(name='ellipse', data=np.repeat(0, ngal).astype(np.bool_)))
    for wavepower in ('-nowavepower', ''):
        for modeltype in ('single', 'exponential', 'double'):
            colname = 'chi2_sersic_{}{}'.format(modeltype, wavepower).replace('-', '_')
            results.add_column(Column(name=colname, data=np.repeat(chi2fail, ngal).astype('f4')))
    
    allobjid, allobjdir = legacyhalos.io.get_objid(sample)

    sersic_single = _init_sersic(ngal, mem_match_id=sample['mem_match_id'].data, modeltype='single')
    sersic_double = _init_sersic(ngal, mem_match_id=sample['mem_match_id'].data, modeltype='double')
    sersic_exponential = _init_sersic(ngal, mem_match_id=sample['mem_match_id'].data, modeltype='exponential')

    sersic_single_nowavepower = _init_sersic(ngal, modeltype='single')
    sersic_double_nowavepower = _init_sersic(ngal, modeltype='double')
    sersic_exponential_nowavepower = _init_sersic(ngal, modeltype='exponential')
    
    for ii, (objid, objdir) in enumerate( zip(np.atleast_1d(allobjid), np.atleast_1d(allobjdir)) ):

        #ellipsefit = legacyhalos.io.read_ellipsefit(objid, objdir, verbose=verbose)
        #if bool(ellipsefit):
        #    if ellipsefit['success']:
        #        results['ellipse'][ii] = 1

        # Sersic modeling
        for wavepower in ('-nowavepower', ''):
            for modeltype in ('single', 'exponential', 'double'):
                modelname = '{}{}'.format(modeltype, wavepower)
                colname = 'sersic_{}'.format(modelname).replace('-', '_')
            
                sersic = legacyhalos.io.read_sersic(objid, objdir, model=modelname, verbose=verbose)
                if bool(sersic):
                    results['chi2_{}'.format(colname)][ii] = sersic['chi2']

                    data = locals()[colname]
                    data['success'][ii] = sersic['success']
                    data['converged'][ii] = sersic['converged']

                    # best-fitting parameters
                    for param in sersic['params']:
                        data[param][ii] = sersic[param]
                        data['{}_err'.format(param)][ii] = sersic['{}_err'.format(param)]

                    # integrate to get the total photometry
                    if sersic['success']:
                        phot = sersic_integrate(sersic, debug=args.debug)
                        
                        #for col in sersic['phot'].colnames:
                        #    data[col][ii] = sersic['phot'][col]
                        pdb.set_trace()
                        
                    locals()[colname] = data
                    
    # Write out summary statistics
    if verbose:
        print('Summary statistics:')
        print('  Number of galaxies: {} '.format(ngal))
        #print('  Ellipse-fitting: {}/{} ({:.1f}%) '.format(
        #    np.sum(results['ellipse']), ngal, 100*np.sum(results['ellipse'])/ngal))
        for wavepower in ('-nowavepower', ''):
            for modeltype in ('single', 'exponential', 'double'):
                modelname = '{}{}'.format(modeltype, wavepower)
                colname = 'chi2_sersic_{}'.format(modelname).replace('-', '_')
                ndone = np.sum(results[colname] < chi2fail)
                fracdone = 100 * ndone / ngal
                print('  {}: {}/{} ({:.1f}%) '.format(modelname, ndone, ngal, fracdone))
    print(results)

    # Write out
    legacyhalos.io.write_results(results, clobber=args.clobber, sersic_single=sersic_single,
                                 sersic_double=sersic_double, sersic_exponential=sersic_exponential,
                                 sersic_single_nowavepower=sersic_single_nowavepower,
                                 sersic_double_nowavepower=sersic_double_nowavepower,
                                 sersic_exponential_nowavepower=sersic_exponential_nowavepower,
                                 verbose=verbose)

if __name__ == '__main__':
    main()
