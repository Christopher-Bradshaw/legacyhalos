#!/usr/bin/env python
"""MPI wrapper for the legacyhalos project.

legacyhalos-mpi --coadds

"""
import os, time, pdb
import numpy as np

import matplotlib
matplotlib.use('Agg')

#import tempfile
#import matplotlib.pyplot as plt
#os.environ['MPLCONFIGDIR'] = tempfile.mkdtemp()

def main():
    """Top-level wrapper.

    """
    import legacyhalos.io
    import legacyhalos.legacyhalos
    from legacypipe.runs import get_survey

    from legacyhalos.legacyhalos import ZCOLUMN, RACOLUMN, DECCOLUMN, DIAMCOLUMN

    basedir = legacyhalos.io.legacyhalos_dir()
    datadir = legacyhalos.io.legacyhalos_data_dir()
    htmldir = legacyhalos.io.legacyhalos_html_dir()

    args = legacyhalos.legacyhalos.mpi_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    sample, fullsample = None, None
    if rank == 0:
        print('$LEGACYHALOS_DIR={}'.format(basedir))
        print('$LEGACYHALOS_DATA_DIR={}'.format(datadir))
        print('$LEGACYHALOS_HTML_DIR={}'.format(htmldir))

        # For the custom coadds and build_catalog steps we need the satellites, too.
        if args.coadds or args.build_catalog or args.build_refcat:
            sample, fullsample = legacyhalos.legacyhalos.read_redmapper(
                first=args.first, last=args.last, verbose=args.verbose,
                satellites=True)
        else:
            sample = legacyhalos.legacyhalos.read_redmapper(
                first=args.first, last=args.last, verbose=args.verbose)

    if comm is not None:
        sample = comm.bcast(sample, root=0)
        fullsample = comm.bcast(fullsample, root=0)

    # Building the web-page and integrating the ellipse-fitting results work on
    # the full sample, so do that here and then return.
    if args.htmlindex and rank == 0:
        #intflux = legacyhalos.legacyhalos.read_integrated_flux(first=args.first, last=args.last,
        #                                                       verbose=args.verbose)
        intflux = None
        #legacyhalos.legacyhalos.make_html(sample, intflux=intflux, survey=None, pixscale=args.pixscale,
        #                                  zcolumn=ZCOLUMN, nproc=args.nproc, clobber=args.clobber,
        #                                  makeplots=False, verbose=args.verbose, htmldir=args.htmldir)
        legacyhalos.legacyhalos.make_html(sample, survey=None, pixscale=args.pixscale,
                                          racolumn=RACOLUMN, deccolumn=DECCOLUMN, diamcolumn=DIAMCOLUMN,
                                          zcolumn=ZCOLUMN, nproc=args.nproc, clobber=args.clobber,
                                          makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                                          htmlhome=args.htmlhome, html_raslices=args.html_raslices,
                                          args=args)
        return

    if args.build_refcat or args.integrate and rank == 0:
        if args.build_refcat:
            # build a reference catalog for use with the pipeline
            
            import fitsio
            from astropy.table import Table

            ngal = len(fullsample)
            ref = Table()
            ref['ra'] = fullsample['RA']
            ref['dec'] = fullsample['DEC']
            ref['sga_id'] = fullsample['ID']
            ref['mag_leda'] = fullsample['IMAG']
            ref['ba'] = np.repeat(1.0, ngal).astype('f4') # fixed b/a
            ref['pa'] = np.repeat(0.0, ngal).astype('f4') # fixed position angle
            ref['diam'] = np.repeat(10.0 / 60.0, ngal).astype('f4') # fixed diameter [arcmin]

            reffile = os.path.join(legacyhalos.legacyhalos.sample_dir(), 'redmapper-refcat.fits')
            kdreffile = reffile.replace('.fits', '.kd.fits')
            print('Writing {} galaxies to {}'.format(ngal, reffile))
            
            hdr = fitsio.FITSHDR()
            hdrver = 'R1'
            hdr['SGAVER'] = hdrver
            fitsio.write(reffile, ref.as_array(), header=hdr, clobber=True)

            print('Writing {}'.format(kdreffile))
            cmd = 'startree -i {} -o {} -T -P -k -n stars'.format(reffile, kdreffile)
            print(cmd)
            _ = os.system(cmd)

            cmd = 'modhead {} SGAVER {}'.format(kdreffile, hdrver)
            _ = os.system(cmd)

        if args.integrate:
            import legacyhalos.integrate
            results = legacyhalos.integrate.integrate(
                sample, nproc=args.nproc, verbose=args.verbose, clobber=args.clobber)
        return

    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    if rank == 0:
        if args.build_catalog:
            print('Write me!')
            pass
        else:
            suffix, groups, _, fail = legacyhalos.legacyhalos.missing_files(args, sample, size)
            #groups[0] = groups[0][32:]
    else:
        groups, suffix = [], ''

    if comm is not None:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if rank == 0:
        ntodo = len(np.hstack(groups))
        print('{} left to do: {} / {} divided across {} rank(s).'.format(
            suffix.upper(), ntodo, len(sample), size), flush=True)
        
    # Wait for all ranks to catch up.
    if comm is not None:
        comm.barrier()

    if len(groups[rank]) == 0:
        print('{} for all {} galaxies on rank {} are complete!'.format(
            suffix.upper(), len(sample), rank), flush=True)
        if rank == 0 and args.count and args.debug:
            if len(fail[rank]) > 0:
                print('{} failures: {} / {}'.format(suffix.upper(), len(fail[rank]), len(sample)), flush=True)
                galaxy, galaxydir = legacyhalos.legacyhalos.get_galaxy_galaxydir(sample[fail[rank]])
                for ii, dd, diam in zip(fail[rank], np.atleast_1d(galaxydir), sample[fail[rank]][DIAMCOLUMN]):
                    print('  {} {} (r={:.3f} arcsec)'.format(ii, dd, diam))
        return
    else:
        if not args.build_catalog:
            print(' Rank {}: {} galaxies left to do.'.format(rank, len(groups[rank])), flush=True)
        if rank == 0 and args.count:
            if args.debug:
                if len(fail[rank]) > 0:
                    print('{} failures: {} / {}'.format(suffix.upper(), len(fail[rank]), len(sample)), flush=True)
                    galaxy, galaxydir = legacyhalos.legacyhalos.get_galaxy_galaxydir(sample[fail[rank]])
                    for ii, dd, diam in zip(fail[rank], np.atleast_1d(galaxydir), sample[fail[rank]][DIAMCOLUMN]):
                        print('  {} {} (r={:.3f} arcsec)'.format(ii, dd, diam))

                todo = np.hstack(groups)
                if len(todo) > 0:
                    print('{} todo: {} / {}'.format(suffix.upper(), len(todo), len(sample)), flush=True)
                    galaxy, galaxydir = legacyhalos.legacyhalos.get_galaxy_galaxydir(sample[todo])
                    for ii, dd, diam in zip(todo, np.atleast_1d(galaxydir), sample[todo][DIAMCOLUMN]):
                        print('  {} {} (r={:.3f} arcsec)'.format(ii, dd, diam))
            return
        
    # Wait for all ranks to catch up.
    if comm is not None:
        comm.barrier()

    # Loop on the remaining objects.
    print('Starting {} {} on rank {} with {} cores on {}'.format(
        len(groups[rank]), suffix.upper(), rank, args.nproc, time.asctime()),
        flush=True)

    # Build the SGA only on rank 0 in order to avoid memory problems--
    if args.build_catalog:
        pdb.set_trace()

    # The rest of the pipeline--
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = legacyhalos.legacyhalos.get_galaxy_galaxydir(onegal)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
            #print('Logging to {} '.format(logfile), flush=True)

        # Need the cluster "radius" to build the coadds.
        radius_mosaic_arcsec = onegal[DIAMCOLUMN] # [arcsec]
        subsky_radii = radius_mosaic_arcsec * np.array([1.4, 1.5,  # annulus 0
                                                        1.0, 1.1,  # annulus 1
                                                        2.0, 2.1,  # annulus 2
                                                        3.0, 3.1]) # annulus 3
        
        run = legacyhalos.io.get_run(onegal, racolumn=RACOLUMN, deccolumn=DECCOLUMN)
        survey = get_survey(run, output_dir=galaxydir)

        if args.coadds:
            from legacyhalos.mpi import call_custom_coadds
            if args.sdss:
                pass
                #err = legacyhalos.sdss.download(sample, pixscale=args.sdss_pixscale, clobber=args.clobber)
                #pdb.set_trace()
            else:
                # Write out the individual galaxies for this mosaic.
                thissample = fullsample[np.where(onegal['MEM_MATCH_ID'] == fullsample['MEM_MATCH_ID'])[0]]
                samplefile = os.path.join(galaxydir, '{}-redmapper-sample.fits'.format(galaxy))
                if args.clobber or not os.path.isfile(samplefile):
                    print('Writing {} galaxy(ies) to {}'.format(len(thissample), samplefile))
                    thissample.write(samplefile, overwrite=True)

                call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                                   pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                                   largegalaxy=False, pipeline=False, custom=True,
                                   apodize=False, unwise=args.unwise, force=args.force, plots=False,
                                   verbose=args.verbose, cleanup=args.cleanup, write_all_pickles=True,
                                   subsky_radii=subsky_radii,
                                   just_coadds=args.just_coadds, no_gaia=False, no_tycho=False,
                                   require_grz=True, debug=args.debug, logfile=logfile)

        if args.pipeline_coadds:
            from legacyhalos.mpi import call_custom_coadds
            # No unwise here (we do it in --coadds) and don't care about the
            # model images.

            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               largegalaxy=False, pipeline=True, custom=False,
                               apodize=False, unwise=False, force=args.force, plots=False,
                               verbose=args.verbose, cleanup=args.cleanup, write_all_pickles=True,
                               just_coadds=args.just_coadds,
                               no_gaia=False, no_tycho=False, debug=args.debug, logfile=logfile)

        if args.ellipse:
            from legacyhalos.legacyhalos import call_ellipse
            call_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir, filesuffix='custom', 
                         bands=['g', 'r', 'z'], refband='r',
                         pixscale=args.pixscale, nproc=args.nproc,
                         verbose=args.verbose, debug=args.debug,
                         sky_tests=args.sky_tests, unwise=False,
                         logfile=logfile)
                             
        if args.htmlplots:
            from legacyhalos.mpi import call_htmlplots
            from legacyhalos.legacyhalos import legacyhalos_cosmology

            cosmo = legacyhalos_cosmology()
            barlabel = '30 arcsec'
            barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(onegal, galaxy, survey, pixscale=args.pixscale, nproc=args.nproc,
                           verbose=args.verbose, debug=args.debug, clobber=args.clobber,
                           ccdqa=args.ccdqa, logfile=logfile, zcolumn=ZCOLUMN,
                           htmldir=htmldir, datadir=datadir,
                           barlen=barlen, barlabel=barlabel,
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           cosmo=cosmo, just_coadds=args.just_coadds,
                           get_galaxy_galaxydir=legacyhalos.legacyhalos.get_galaxy_galaxydir,
                           read_multiband=legacyhalos.legacyhalos.read_multiband)

    # Wait for all ranks to finish.
    if comm is not None:
        comm.barrier()
        
    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups, _, _ = legacyhalos.legacyhalos.missing_files(args, sample, size, clobber_overwrite=False)
        if len(groups) > 0:
            stilltodo = len(np.hstack(groups))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
