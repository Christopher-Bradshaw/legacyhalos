#!/usr/bin/env python
"""MPI wrapper for the tidal streams project.

funpack -Z -F -v streams/*/*custom*.fz
funpack -Z -F -v streams/*/*pipeline*.fz
funpack -Z -F -v streams/*/*invvar*.fz

montage -bordercolor white -borderwidth 1 -tile 5x5 -geometry +0+0 -resize 512 */*-custom-image-grz.jpg ./streams.png

"""
import matplotlib
matplotlib.use('Agg')

import os, time, pdb
import numpy as np

def main():
    """Top-level wrapper.

    """
    from astropy.table import Table, hstack
    import legacyhalos.io
    import legacyhalos.mpi
    import legacyhalos.streams

    from legacypipe.survey import LegacySurveyData
    from legacyhalos.mpi import call_pipeline_coadds, call_custom_coadds

    args = legacyhalos.streams.mpi_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    if rank == 0:
        sample = legacyhalos.streams.read_sample(first=args.first, last=args.last,
                                                 verbose=args.verbose)
    else:
        sample = None

    if comm:
        sample = comm.bcast(sample, root=0)

    if args.coadds and not args.count:
        kdccds_north, kdccds_south = legacyhalos.io.read_all_ccds()

    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    groups, suffix = [], ''
    if rank == 0:
        suffix, groups = legacyhalos.streams.missing_files_groups(args, sample, size)

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))
        
    if rank == 0:
        if ntodo == 0:
            print('{} for all {} galaxies are complete!'.format(
                suffix.upper(), len(sample)), flush=True)
            return
        else:
            print('{} left to do: {} / {} divided across {} group(s) and {} rank(s).'.format(
                suffix.upper(), ntodo, len(sample), len(groups), size), flush=True)

    if len(groups[rank]) == 0 or args.count:
        if len(groups[rank]) > 0 and args.debug:
            galaxy, galaxydir = legacyhalos.streams.get_galaxy_galaxydir(sample[tuple(groups)])
            for ii, dd in zip(groups[rank], galaxydir):
                print('  {} {}'.format(ii, dd))
        return

    # Loop on the remaining objects.
    print('Starting {} {} on rank {} at {}'.format(len(groups[rank]), suffix.upper(),
                                                   rank, time.asctime()), flush=True)
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = legacyhalos.streams.get_galaxy_galaxydir(onegal)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
        
        # Need the object "radius" to build the coadds.
        if args.coadds or args.custom_coadds:
            radius_mask_arcsec = onegal['RADIUS_MASK']  # [arcsec]
            radius_mosaic_arcsec = onegal['RADIUS_MOSAIC']  # [arcsec]

            survey = LegacySurveyData()
            survey.output_dir = galaxydir

        if args.coadds:
            call_pipeline_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                 kdccds_north, kdccds_south, pixscale=args.pixscale,
                                 nproc=args.nproc, force=args.force, debug=args.debug,
                                 logfile=logfile, apodize=True, unwise=False,
                                 no_large_galaxies=False, no_gaia=False, no_tycho=False)
                    
        if args.custom_coadds and not legacyhalos.io.check_and_read_ccds(
                        galaxy, survey, debug=args.debug, logfile=logfile):
            continue

        if args.custom_coadds:
            if len(legacyhalos.streams.missing_files(onegal, filetype='coadds')) == 0:
                from legacyhalos.html import qa_ccdpos
                qa_ccdpos(onegal, galaxy, galaxydir, galaxydir, pixscale=args.pixscale,
                          radius=radius_mosaic_arcsec/args.pixscale, survey=survey,
                          clobber=args.clobber, verbose=args.verbose)
                call_custom_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                   pixscale=args.pixscale, nproc=args.nproc,
                                   debug=args.debug, logfile=logfile,
                                   radius_mask=radius_mask_arcsec, write_ccddata=True,
                                   doforced_phot=False, apodize=True)

    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups = legacyhalos.streams.missing_files_groups(args, sample, size)
        if len(groups) > 0:
            stilltodo = len(np.hstack(np.atleast_1d(groups)))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
