#!/usr/bin/env python

"""custom-sbprofiles --clobber

Run the legacyhalos pipeline on a custom set of positions to derive the surface
brightness profile.

"""
import os, argparse, pdb, pickle
import numpy as np
from astropy.table import Table

import matplotlib.pyplot as plt

import legacyhalos.qa
import legacyhalos.html
import legacyhalos.coadds
from legacyhalos.ellipse import ellipse_sbprofile
from legacyhalos.misc import cutout_radius_150kpc

from astrometry.util.multiproc import multiproc
from astrometry.util.fits import fits_table, merge_tables

PIXSCALE = 0.262
DIAMFACTOR = 5

def _missing(sample, size=1, filetype='coadds', clobber=False):
    """Find missing data of a given filetype."""    

    if filetype == 'coadds':
        filesuffix = 'image-central.jpg'
    elif filetype == 'ellipse':
        filesuffix = 'ellipsefit.p'
    elif filetype == 'sersic':
        filesuffix = 'sersic-single.p'
    elif filetype == 'sky':
        filesuffix = 'ellipsefit-sky.p'
    else:
        print('Unrecognized file type!')
        raise ValueError

    objdir = '.'
    objid = sample['GALAXY']

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)
    
    for ii, (objid1, objdir1) in enumerate( zip(np.atleast_1d(objid), np.atleast_1d(objdir)) ):
        residfile = os.path.join(objdir1, '{}-{}'.format(objid1, filesuffix))
        if os.path.exists(residfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices = indices[todo]
    return np.array_split(indices, size)

def missing_coadds(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have coadds.'''
    return _missing(sample, size=size, filetype='coadds',
                    clobber=clobber)

def missing_ellipse(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have ellipse fits.'''
    return _missing(sample, size=size, filetype='ellipse',
                    clobber=clobber)

def main():

    from legacypipe.survey import LegacySurveyData
    survey = LegacySurveyData()
    survey.output_dir = '.'

    sample = Table()
    sample['GALAXY'] = np.array(['CGCG004-096'])
    sample['RA'] = np.array([129.603676]).astype('f8')
    sample['DEC'] = np.array([-1.606419]).astype('f8')
    sample['Z'] = np.array([0.05204]).astype('f4')
    sample['PSFSIZE_G'] = np.array([1.1]).astype('f4') # hack!
    sample['PSFSIZE_R'] = np.array([1.1]).astype('f4')
    sample['PSFSIZE_Z'] = np.array([1.1]).astype('f4')

    log = None
    #force = True
    force = False
    splinesky = True
    #ncpu = 1
    ncpu = 16

    mp = multiproc(nthreads=ncpu)

    for onegal in sample:

        prefix = onegal['GALAXY']
        radius = cutout_radius_150kpc(redshift=onegal['Z'], pixscale=PIXSCALE)

        ccdsfile = os.path.join('.', '{}-ccds.fits'.format(prefix))
        ccds = fits_table(ccdsfile)

        qaccdposfile = os.path.join('qa-{}-ccdpos.png'.format(onegal['GALAXY'].lower()))
        legacyhalos.qa.ccdpos(onegal, ccds, png=qaccdposfile)

        pdb.set_trace()

        for iccd, ccd in enumerate(ccds):
            im = survey.get_image_object(ccd)
            print(im, im.band, 'exptime', im.exptime, 'propid', ccd.propid,
                  'seeing {:.2f}'.format(ccd.fwhm*im.pixscale), 
                  'object', getattr(ccd, 'object', None))
            tim = im.get_tractor_image(splinesky=True, subsky=False,
                                       hybridPsf=True, dq=True)
            #tims.append(tim)

            # Get the (pixel) coordinates of the galaxy on this CCD
            W, H, wcs = _ccdwcs(ccd)
            ok, x0, y0 = wcs.radec2pixelxy(onegal['RA'], onegal['DEC'])
            xcen, ycen = x0-1, y0-1
            pxscale = wcs.pixel_scale()

            pdb.set_trace()
            


        if len(missing_coadds(sample, clobber=True)) > 0:
            brickname = legacyhalos.coadds.custom_brickname(onegal['RA'], onegal['DEC'], prefix='')

            P = legacyhalos.coadds.coadds_stage_tims(onegal, survey=survey, mp=mp, radius=radius,
                                                     brickname=brickname, pixscale=PIXSCALE,
                                                     log=log, splinesky=splinesky, plots=True)
            
            
            
            pdb.set_trace()

            # Step 1 - Build a custom brick.
            success = legacyhalos.coadds.custom_brick(onegal, prefix, survey=survey, radius=radius,
                                                      ncpu=ncpu, pixscale=PIXSCALE, log=log, force=force,
                                                      archivedir=None, splinesky=splinesky)

            if success:
                # Step 2 - Read the Tractor catalog for this brick and remove the central.
                cat = legacyhalos.coadds.read_tractor(onegal, prefix=prefix, survey=survey, log=log)

                # Step 3 - Set up the first stage of the pipeline.
                P = legacyhalos.coadds.coadds_stage_tims(onegal, survey=survey, mp=mp, radius=radius,
                                                         brickname=brickname, pixscale=PIXSCALE,
                                                         log=log, splinesky=splinesky)

                ## To get the sky models:
                #tim = P['tims'][0]
                #sky = tim.imobj.read_sky_model(splinesky=True, slc=tim.slice)
                #skymod = np.zeros(tim.shape, np.float32)
                #sky.addTo(skymod)
                #import matplotlib.pyplot as plt
                #plt.imshow(skymod, origin='lower')
                #plt.show()

                # Step 4 - Render the model images without the central.
                mods = legacyhalos.coadds.build_model_image(cat, tims=P['tims'], survey=survey, log=log)

                # Step 3 - Generate and write out the coadds.
                legacyhalos.coadds.tractor_coadds(onegal, P['targetwcs'], P['tims'], mods, P['version_header'],
                                                  prefix=prefix, brickname=brickname, survey=survey, mp=mp,
                                                  log=log, skycoadd=True)

        pdb.set_trace()

        if len(missing_ellipse(sample, clobber=True)) > 0:
            from legacyhalos.ellipse import legacyhalos_ellipse
            success = legacyhalos_ellipse(onegal, objid=prefix, objdir='.', ncpu=ncpu, 
                                          pixscale=PIXSCALE, debug=False, verbose=True)

        # Plots---
        legacyhalos.html.make_plots(onegal, analysisdir='.', htmldir='.',
                                    clobber=True, verbose=True)

        with open('CGCG004-096-ellipsefit.p', 'rb') as ff:
            res = pickle.load(ff)
        prof = ellipse_sbprofile(res)            
        with open('CGCG004-096-sbprofile.p', 'wb') as out:
            pickle.dump(prof, out)
            
        pdb.set_trace()
    
if __name__ == '__main__':
    main()

