#!/usr/bin/env python

"""Produce the data release catalogs.

This script should be run after building the "ellipse" catalog via e.g.,
  salloc -N 1 -C haswell -A desi -L cfs,SCRATCH -t 04:00:00 --qos interactive --image=legacysurvey/legacyhalos:v0.0.4
  srun -n 32 -c 32 --kill-on-bad-exit=0 --no-kill shifter --module=mpich-cle6 $LEGACYHALOS_CODE_DIR/bin/SGA/SGA-mpi.sh buildSGA 32 > buildSGA.log 2>&1 &

"""
import os, pdb
import numpy as np
import fitsio
import astropy.units as u
from astropy.table import QTable
from astropy.io import fits

def main():

    ellipsefile = '/global/cfs/cdirs/cosmo/staging/largegalaxies/v3.2/SGA-ellipse-v3.2.fits'
    ellipse = QTable(fitsio.read(ellipsefile))
    print('Read {} galaxies from {}'.format(len(ellipse), ellipsefile))

    # First, remove the non-SGA Tractor sources. These sources end up in the DR9
    # files and are identifiable with the selection FITBITS & 'FROZEN' != 0.
    isga = np.where(ellipse['SGA_ID'] != -1)[0]
    print('Keeping {} SGA galaxies (i.e., removing non-SGA Tractor sources.'.format(len(isga)))
    sgaall = ellipse[isga]

    # Divide the sample into the pre-burned (in-footprint) and not pre-burned
    # (off-footprint) samples. In the off-footprint sample we don't need all the
    # SGA columns; we will just store the Hyperleda catalog parameters.
    sga = sgaall[sgaall['PREBURNED']]
    sga_leda = sgaall[np.logical_not(sgaall['PREBURNED'])]

    print('Keeping {} galaxies in the SGA (fitted) sample.'.format(len(sga)))
    print('Keeping {} galaxies in the SGA/LEDA (not fitted) sample.'.format(len(sga_leda)))

    # Update the data model.
    for col in ['PREBURNED', 'FREEZE', 'IN_FOOTPRINT', 'IN_FOOTPRINT_GRZ']:
        sga.remove_column(col)
        sga_leda.remove_column(col)

    tractorcols = [
        'RELEASE', 'BRICKID', 'OBJID', 'BRICK_PRIMARY', 'MASKBITS', 'ITERATIVE',
        'TYPE', 'RA', 'DEC', 'RA_IVAR', 'DEC_IVAR', 'BX', 'BY', 'DCHISQ', 'EBV',
        'MJD_MIN', 'MJD_MAX', 'REF_CAT', 'REF_ID', 'PMRA', 'PMDEC', 'PARALLAX',
        'PMRA_IVAR', 'PMDEC_IVAR', 'PARALLAX_IVAR', 'REF_EPOCH', 'GAIA_POINTSOURCE',
        'GAIA_PHOT_G_MEAN_MAG', 'GAIA_PHOT_G_MEAN_FLUX_OVER_ERROR',
        'GAIA_PHOT_G_N_OBS', 'GAIA_PHOT_BP_MEAN_MAG',
        'GAIA_PHOT_BP_MEAN_FLUX_OVER_ERROR', 'GAIA_PHOT_BP_N_OBS',
        'GAIA_PHOT_RP_MEAN_MAG', 'GAIA_PHOT_RP_MEAN_FLUX_OVER_ERROR',
        'GAIA_PHOT_RP_N_OBS', 'GAIA_PHOT_VARIABLE_FLAG',
        'GAIA_ASTROMETRIC_EXCESS_NOISE', 'GAIA_ASTROMETRIC_EXCESS_NOISE_SIG',
        'GAIA_ASTROMETRIC_N_OBS_AL', 'GAIA_ASTROMETRIC_N_GOOD_OBS_AL',
        'GAIA_ASTROMETRIC_WEIGHT_AL', 'GAIA_DUPLICATED_SOURCE', 'GAIA_A_G_VAL',
        'GAIA_E_BP_MIN_RP_VAL', 'GAIA_PHOT_BP_RP_EXCESS_FACTOR',
        'GAIA_ASTROMETRIC_SIGMA5D_MAX', 'GAIA_ASTROMETRIC_PARAMS_SOLVED', 'FLUX_G',
        'FLUX_R', 'FLUX_Z', 'FLUX_W1', 'FLUX_W2', 'FLUX_W3', 'FLUX_W4',
        'FLUX_IVAR_G', 'FLUX_IVAR_R', 'FLUX_IVAR_Z', 'FLUX_IVAR_W1', 'FLUX_IVAR_W2',
        'FLUX_IVAR_W3', 'FLUX_IVAR_W4', 'FIBERFLUX_G', 'FIBERFLUX_R', 'FIBERFLUX_Z',
        'FIBERTOTFLUX_G', 'FIBERTOTFLUX_R', 'FIBERTOTFLUX_Z', 'APFLUX_G',
        'APFLUX_R', 'APFLUX_Z', 'APFLUX_RESID_G', 'APFLUX_RESID_R',
        'APFLUX_RESID_Z', 'APFLUX_BLOBRESID_G', 'APFLUX_BLOBRESID_R',
        'APFLUX_BLOBRESID_Z', 'APFLUX_IVAR_G', 'APFLUX_IVAR_R', 'APFLUX_IVAR_Z',
        'APFLUX_MASKED_G', 'APFLUX_MASKED_R', 'APFLUX_MASKED_Z', 'APFLUX_W1',
        'APFLUX_W2', 'APFLUX_W3', 'APFLUX_W4', 'APFLUX_RESID_W1', 'APFLUX_RESID_W2',
        'APFLUX_RESID_W3', 'APFLUX_RESID_W4', 'APFLUX_IVAR_W1', 'APFLUX_IVAR_W2',
        'APFLUX_IVAR_W3', 'APFLUX_IVAR_W4', 'MW_TRANSMISSION_G',
        'MW_TRANSMISSION_R', 'MW_TRANSMISSION_Z', 'MW_TRANSMISSION_W1',
        'MW_TRANSMISSION_W2', 'MW_TRANSMISSION_W3', 'MW_TRANSMISSION_W4', 'NOBS_G',
        'NOBS_R', 'NOBS_Z', 'NOBS_W1', 'NOBS_W2', 'NOBS_W3', 'NOBS_W4', 'RCHISQ_G',
        'RCHISQ_R', 'RCHISQ_Z', 'RCHISQ_W1', 'RCHISQ_W2', 'RCHISQ_W3', 'RCHISQ_W4',
        'FRACFLUX_G', 'FRACFLUX_R', 'FRACFLUX_Z', 'FRACFLUX_W1', 'FRACFLUX_W2',
        'FRACFLUX_W3', 'FRACFLUX_W4', 'FRACMASKED_G', 'FRACMASKED_R',
        'FRACMASKED_Z', 'FRACIN_G', 'FRACIN_R', 'FRACIN_Z', 'ANYMASK_G',
        'ANYMASK_R', 'ANYMASK_Z', 'ALLMASK_G', 'ALLMASK_R', 'ALLMASK_Z',
        'WISEMASK_W1', 'WISEMASK_W2', 'PSFSIZE_G', 'PSFSIZE_R', 'PSFSIZE_Z',
        'PSFDEPTH_G', 'PSFDEPTH_R', 'PSFDEPTH_Z', 'GALDEPTH_G', 'GALDEPTH_R',
        'GALDEPTH_Z', 'PSFDEPTH_W1', 'PSFDEPTH_W2', 'PSFDEPTH_W3', 'PSFDEPTH_W4',
        'WISE_COADD_ID', 'WISE_X', 'WISE_Y', 'SERSIC', 'SERSIC_IVAR', 'SHAPE_R',
        'SHAPE_R_IVAR', 'SHAPE_E1', 'SHAPE_E1_IVAR', 'SHAPE_E2', 'SHAPE_E2_IVAR']
        
    sgacols = [
        'DIAM', 'DIAM_REF', 'PA', 'BA', 'ELLIPSEBIT', 'DROPBIT',
        'RADIUS_SB22', 'RADIUS_SB22.5', 'RADIUS_SB23', 'RADIUS_SB23.5',
        'RADIUS_SB24', 'RADIUS_SB24.5', 'RADIUS_SB25', 'RADIUS_SB25.5',
        'RADIUS_SB26', 'G_MAG_SB22', 'R_MAG_SB22', 'Z_MAG_SB22', 'G_MAG_SB22.5',
        'R_MAG_SB22.5', 'Z_MAG_SB22.5', 'G_MAG_SB23', 'R_MAG_SB23', 'Z_MAG_SB23',
        'G_MAG_SB23.5', 'R_MAG_SB23.5', 'Z_MAG_SB23.5', 'G_MAG_SB24', 'R_MAG_SB24',
        'Z_MAG_SB24', 'G_MAG_SB24.5', 'R_MAG_SB24.5', 'Z_MAG_SB24.5', 'G_MAG_SB25',
        'R_MAG_SB25', 'Z_MAG_SB25', 'G_MAG_SB25.5', 'R_MAG_SB25.5', 'Z_MAG_SB25.5',
        'G_MAG_SB26', 'R_MAG_SB26', 'Z_MAG_SB26', 'G_MAG_TOT', 'R_MAG_TOT',
        'Z_MAG_TOT']
        
    sga_tractor = sga[['SGA_ID']+tractorcols]
    for col in tractorcols:
        sga.remove_column(col)
        sga_leda.remove_column(col)

    for col in sgacols:
        sga_leda.remove_column(col)

    # write out
    outdir = '/global/cfs/cdirs/cosmo/work/legacysurvey/sga/2020'
    if not os.path.isdir(outdir):
        os.makedirs(outdir, exist_ok=True)

    # SGA
    outfile = os.path.join(outdir, 'SGA-2020.fits')
    hdu_primary = fits.PrimaryHDU()
    hdu_sga = fits.convenience.table_to_hdu(sga)
    hdu_sga.header['EXTNAME'] = 'SGA'

    hdu_sga_tractor = fits.convenience.table_to_hdu(sga_tractor)
    hdu_sga_tractor.header['EXTNAME'] = 'SGA-TRACTOR'
        
    hx = fits.HDUList([hdu_primary, hdu_sga, hdu_sga_tractor])
    hx.writeto(outfile, overwrite=True, checksum=True)
    print('Wrote {} galaxies to {}'.format(len(sga), outfile))

    # SGA - LEDA
    outfile = os.path.join(outdir, 'SGA-leda-2020.fits')
    hdu_primary = fits.PrimaryHDU()
    hdu_sga_leda = fits.convenience.table_to_hdu(sga_leda)
    hdu_sga_leda.header['EXTNAME'] = 'SGA-LEDA'

    hx = fits.HDUList([hdu_primary, hdu_sga_leda])
    hx.writeto(outfile, overwrite=True, checksum=True)
    print('Wrote {} galaxies to {}'.format(len(sga_leda), outfile))

    pdb.set_trace()

if __name__ == '__main__':
    main()

