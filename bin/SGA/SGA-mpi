#!/usr/bin/env python
"""MPI wrapper for the Siena Galaxy Atlas project.

SGA-mpi --coadds

"""
import matplotlib
matplotlib.use('Agg')

import os, time, pdb
import numpy as np

def _write_SGA(cat, notractor, noellipse, nogrz, outfile, notractorfile,
               noellipsefile, nogrzfile, refcat, skipfull=False):
    import shutil
    import fitsio
    from contextlib import redirect_stdout, redirect_stderr
    from astropy.table import Table, vstack, join
    from legacyhalos.SGA import SGA_version
    
    version = SGA_version()
    
    if len(cat) == 0:
        print('Something went wrong and no galaxies were fitted.')
        return
    cat = vstack(cat)

    if len(notractor) > 0:
        notractor = vstack(notractor)
        print('Writing {} galaxies dropped by Tractor to {}'.format(len(notractor), notractorfile))
        notractor.write(notractorfile, overwrite=True)

    if len(noellipse) > 0:
        noellipse = vstack(noellipse)
        print('Writing {} galaxies not ellipse-fit to {}'.format(len(noellipse), noellipsefile))
        noellipse.write(noellipsefile, overwrite=True)

    if len(nogrz) > 0:
        nogrz = vstack(nogrz)
        print('Writing {} galaxies with no grz coverage to {}'.format(len(nogrz), nogrzfile))
        nogrz.write(nogrzfile, overwrite=True)

    print('Gathered {} pre-burned and frozen galaxies.'.format(len(cat)))
    print('  Frozen (all): {}'.format(np.sum(cat['FREEZE'])))
    print('  Frozen (SGA): {}'.format(np.sum(cat['FREEZE'] * (cat['REF_CAT'] == refcat))))
    print('  Pre-burned: {}'.format(np.sum(cat['PREBURNED'])))

    # We only have frozen galaxies here, but whatever--
    ifreeze = np.where(cat['FREEZE'])[0]
    ilslga = np.where(cat['FREEZE'] * (cat['REF_CAT'] == refcat))[0]

    cat = cat[ifreeze]
    print('Keeping {} frozen galaxies, of which {} are SGA.'.format(len(ifreeze), len(ilslga)))

    # Read the full parent SGA catalog and add all the Tractor columns.
    lslgafile = os.getenv('LARGEGALAXIES_CAT')
    lslga, hdr = fitsio.read(lslgafile, header=True)
    lslga = Table(lslga)
    print('Read {} galaxies from {}'.format(len(lslga), lslgafile))

    # Remove the already-burned SGA galaxies so we don't double-count them--
    ilslga2 = np.where(cat['FREEZE'] * (cat['REF_CAT'] == refcat))[0]
    rem = np.where(np.isin(lslga['SGA_ID'], cat['SGA_ID'][ilslga2]))[0]
    print('Removing {} pre-burned SGA galaxies from the parent catalog, so we do not double-count them.'.format(len(rem)))
    lslga = lslga[np.delete(np.arange(len(lslga)), rem)] # remove duplicates

    # Next, remove galaxies that were either dropped by Tractor in pre-burning
    # or which were not ellipse-fit (the latter are in the Tractor catalog but
    # with REF_CAT='').
    if len(notractor) > 0:
        print('Removing {} SGA galaxies dropped by Tractor.'.format(len(notractor)))
        rem = np.where(np.isin(lslga['SGA_ID'], notractor['SGA_ID']))[0]
        assert(len(rem) == len(notractor))
        lslga = lslga[np.delete(np.arange(len(lslga)), rem)]
    if len(noellipse) > 0:
        print('Removing {} SGA galaxies not ellipse-fit.'.format(len(noellipse)))
        rem = np.where(np.isin(lslga['SGA_ID'], noellipse['SGA_ID']))[0]
        assert(len(rem) == len(noellipse))
        lslga = lslga[np.delete(np.arange(len(lslga)), rem)]

    lslga.rename_column('RA', 'SGA_RA')
    lslga.rename_column('DEC', 'SGA_DEC')
    for col in cat.colnames:
        if col in lslga.colnames:
            #print('  Skipping existing column {}'.format(col))
            pass
        else:
            if cat[col].ndim > 1:
                # assume no multidimensional strings or Boolean
                lslga[col] = np.zeros((len(lslga), cat[col].shape[1]), dtype=cat[col].dtype)-1
            else:
                typ = cat[col].dtype.type
                if typ is np.str_ or typ is np.str or typ is np.bool_ or typ is np.bool:
                    lslga[col] = np.zeros(len(lslga), dtype=cat[col].dtype)
                else:
                    lslga[col] = np.zeros(len(lslga), dtype=cat[col].dtype)-1
    lslga['RA'][:] = lslga['SGA_RA']
    lslga['DEC'][:] = lslga['SGA_DEC']

    # Stack!
    if skipfull:
        print('Temporarily leaving off the original SGA!')
        out = cat
    else:
        out = vstack((lslga, cat))
    del lslga, cat
    out = out[np.argsort(out['SGA_ID'])]
    out = vstack((out[out['SGA_ID'] != -1], out[out['SGA_ID'] == -1]))

    if not skipfull:
        # This may not happen if galaxies are dropped--
        #chk1 = np.where(np.isin(out['SGA_ID'], fullsample['SGA_ID']))[0]
        #assert(len(chk1) == len(fullsample))
        if len(nogrz) > 0:
            chk2 = np.where(np.isin(out['SGA_ID'], nogrz['SGA_ID']))[0]
            assert(len(chk2) == len(nogrz))
        if len(notractor) > 0:
            chk3 = np.where(np.isin(out['SGA_ID'], notractor['SGA_ID']))[0]
            assert(len(chk3) == 0)
        if len(noellipse) > 0:
            chk4 = np.where(np.isin(out['SGA_ID'], noellipse['SGA_ID']))[0]
            assert(len(chk4) == 0)
        if len(nogrz) > 0 and len(notractor) > 0:            
            chk5 = np.where(np.isin(notractor['SGA_ID'], nogrz['SGA_ID']))[0]
            assert(len(chk5) == 0)
    assert(np.all(out['RA'] > 0))
    assert(np.all(np.isfinite(out['PA'])))
    assert(np.all(np.isfinite(out['BA'])))
    ww = np.where(out['SGA_ID'] != -1)[0]
    assert(np.all((out['PA'][ww] >= 0) * (out['PA'][ww] <= 180)))
    assert(np.all((out['BA'][ww] > 0) * (out['BA'][ww] <= 1.0)))

    print('Writing {} galaxies to {}'.format(len(out), outfile))
    hdrversion = 'L{}-ELLIPSE'.format(version[1:2]) # fragile!
    hdr['SGAVER'] = hdrversion
    fitsio.write(outfile, out.as_array(), header=hdr, clobber=True)

    # Write the KD-tree version
    kdoutfile = outfile.replace('.fits', '.kd.fits') # fragile
    cmd = 'startree -i {} -o {} -T -P -k -n largegals'.format(outfile, kdoutfile)
    print(cmd)
    _ = os.system(cmd)

    cmd = 'modhead {} SGAVER {}'.format(kdoutfile, hdrversion)
    print(cmd)
    _ = os.system(cmd)

    fix_permissions = True
    if fix_permissions:
        print('Fixing group permissions.')
        shutil.chown(outfile, group='cosmo')
        shutil.chown(kdoutfile, group='cosmo')

def _init_SGA(clobber=False):
    import legacyhalos.io
    from legacyhalos.SGA import SGA_version
    from legacypipe.reference import get_large_galaxy_version

    # This is a little fragile.
    version = SGA_version()
    refcat, _ = get_large_galaxy_version(os.getenv('LARGEGALAXIES_CAT'))
    lslgafile = os.getenv('LARGEGALAXIES_CAT')
    print('Using LARGEGALAXIES_CAT={}'.format(lslgafile))
    if 'ellipse' in lslgafile:
        print('Warning: Cannot use $LARGEGALAXIES_CAT with ellipse-fitting results!')
        return False, None, None

    #outdir = os.path.dirname(os.getenv('LARGEGALAXIES_CAT'))
    #outdir = '/global/project/projectdirs/cosmo/staging/largegalaxies/{}'.format(version)
    outdir = legacyhalos.io.legacyhalos_data_dir()
    outfile = os.path.join(outdir, 'SGA-ellipse-{}.fits'.format(version))
    if os.path.isfile(outfile) and not clobber:
        print('Use --clobber to overwrite existing catalog {}'.format(outfile))
        return False, None, None

    #if not debug:
    #    logfile = os.path.join(datadir, '{}-{}.log'.format(galaxy, suffix))
    #    with open(logfile, 'a') as log:
    #        with redirect_stdout(log), redirect_stderr(log):

    notractorfile = os.path.join(outdir, 'SGA-notractor-{}.fits'.format(version))
    noellipsefile = os.path.join(outdir, 'SGA-noellipse-{}.fits'.format(version))
    nogrzfile = os.path.join(outdir, 'SGA-nogrz-{}.fits'.format(version))

    return True, (outfile, notractorfile, noellipsefile, nogrzfile), refcat

def main():
    """Top-level wrapper.

    """
    from legacypipe.runs import get_survey
    import legacyhalos.io
    import legacyhalos.SGA

    from legacyhalos.SGA import ZCOLUMN, RACOLUMN, DECCOLUMN, DIAMCOLUMN

    basedir = legacyhalos.io.legacyhalos_dir()
    datadir = legacyhalos.io.legacyhalos_data_dir()
    htmldir = legacyhalos.io.legacyhalos_html_dir()
    
    args = legacyhalos.SGA.mpi_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    sample, fullsample = None, None
    if rank == 0:
        print('$LEGACYHALOS_DIR={}'.format(basedir))
        print('$LEGACYHALOS_DATA_DIR={}'.format(datadir))
        print('$LEGACYHALOS_HTML_DIR={}'.format(htmldir))
        sample = legacyhalos.SGA.read_sample(first=args.first, last=args.last,
                                             d25min=args.d25min, d25max=args.d25max, 
                                             galaxylist=args.galaxylist,
                                             verbose=args.verbose,
                                             customsky=args.customsky,
                                             customredux=args.customredux,
                                             nproc=args.nproc,
                                             preselect_sample=True)
        if len(sample) == 0:
            return
        
        # For the custom coadds step we write out the full sample in each mosaic.
        if args.coadds or args.build_SGA:
            fullsample = legacyhalos.SGA.read_sample(verbose=args.verbose,
                                                     preselect_sample=False,
                                                     customsky=False)
            fullsample = fullsample[np.isin(fullsample['GROUP_ID'], sample['GROUP_ID'])]
        else:
            fullsample = None

    if comm:
        sample = comm.bcast(sample, root=0)
        fullsample = comm.bcast(fullsample, root=0)

    # Building the web-pages works on the full sample, so do that here and then
    # return.
    if args.htmlindex and rank == 0:
        legacyhalos.SGA.make_html(sample, survey=None, pixscale=args.pixscale,
                                  racolumn=RACOLUMN, deccolumn=DECCOLUMN, diamcolumn=DIAMCOLUMN,
                                  zcolumn=ZCOLUMN, nproc=args.nproc, clobber=args.clobber,
                                  makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                                  ccdqa=args.ccdqa, args=args)
        return
        
    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    if rank == 0:
        suffix, groups, _, fail = legacyhalos.SGA.missing_files(args, sample, size)
    else:
        groups, suffix = [], ''

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if rank == 0:
        ntodo = len(np.hstack(groups))
        print('{} left to do: {} / {} divided across {} rank(s).'.format(
            suffix.upper(), ntodo, len(sample), size), flush=True)
        
    # Wait for all ranks to catch up.
    if comm is not None:
        comm.barrier()

    if len(groups[rank]) == 0:
        print('{} for all {} galaxies on rank {} are complete!'.format(
            suffix.upper(), len(sample), rank), flush=True)
        if rank == 0 and args.count and args.debug:
            if len(fail[rank]) > 0:
                print('{} failures: {} / {}'.format(suffix.upper(), len(fail[rank]), len(sample)), flush=True)
                galaxy, galaxydir = legacyhalos.SGA.get_galaxy_galaxydir(sample[fail[rank]])
                for ii, dd, diam in zip(fail[rank], np.atleast_1d(galaxydir), sample[fail[rank]][DIAMCOLUMN]):
                    #print('\rm {}/*'.format(dd))
                    print('  {} {} (D25={:.3f})'.format(ii, dd, diam))
        return
    else:
        print(' Rank {}: {} galaxies left to do.'.format(rank, len(groups[rank])), flush=True)
        if rank == 0 and args.count:
            if args.debug:
                if len(fail[rank]) > 0:
                    print('{} failures: {} / {}'.format(suffix.upper(), len(fail[rank]), len(sample)), flush=True)
                    galaxy, galaxydir = legacyhalos.SGA.get_galaxy_galaxydir(sample[fail[rank]])
                    for ii, dd, diam in zip(fail[rank], np.atleast_1d(galaxydir), sample[fail[rank]][DIAMCOLUMN]):
                        #print('\rm {}/*'.format(dd))
                        print('  {} {} (D25={:.3f})'.format(ii, dd, diam))

                todo = np.hstack(groups)
                if len(todo) > 0:
                    print('{} todo: {} / {}'.format(suffix.upper(), len(todo), len(sample)), flush=True)
                    #print('Galaxies left to do:')
                    galaxy, galaxydir = legacyhalos.SGA.get_galaxy_galaxydir(sample[todo])
                    for ii, dd, diam in zip(todo, np.atleast_1d(galaxydir), sample[todo][DIAMCOLUMN]):
                        #print('{}'.format(dd))
                        print('  {} {} (D25={:.3f})'.format(ii, dd, diam))
            return
        
    # Wait for all ranks to catch up.
    if comm is not None:
        comm.barrier()

    # Loop on the remaining objects.
    print('Starting {} {} on rank {} with {} cores on {}'.format(
        len(groups[rank]), suffix.upper(), rank, args.nproc, time.asctime()),
        flush=True)

    # Build the SGA--
    if args.build_SGA:
        if rank == 0:
            buildit, filenames, refcat = _init_SGA(clobber=args.clobber)
        else:
            buildit, filenames, refcat = None, None, None
            
        if comm:
            buildit = comm.bcast(buildit, root=0)
            refcat = comm.bcast(refcat, root=0)

        if buildit:
            from legacyhalos.SGA import _build_ellipse_SGA_one
            from astrometry.util.multiproc import multiproc
            
            ranksample = sample[groups[rank]]
            rankfullsample = fullsample[np.isin(fullsample['GROUP_ID'], ranksample['GROUP_ID'])]

            mp = multiproc(nthreads=args.nproc)
            buildargs = []
            for onegal in ranksample:
                buildargs.append((onegal, rankfullsample[rankfullsample['GROUP_ID'] == onegal['GROUP_ID']], refcat))
            rr = mp.map(_build_ellipse_SGA_one, buildargs)
            rr = list(zip(*rr))

            cat = list(filter(None, rr[0]))
            notractor = list(filter(None, rr[1]))
            noellipse = list(filter(None, rr[2]))
            nogrz = list(filter(None, rr[3]))

            if comm is not None:
                cat = comm.gather(cat, root=0)
                notractor = comm.gather(notractor, root=0)
                noellipse = comm.gather(noellipse, root=0)
                nogrz = comm.gather(nogrz, root=0)

            if rank == 0:
                outfile, notractorfile, noellipsefile, nogrzfile = filenames
                _write_SGA(cat, notractor, noellipse, nogrz, outfile, notractorfile,
                           noellipsefile, nogrzfile, refcat, skipfull=True)
                
        print('Rank {} is all done.'.format(rank))
        return
    
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = legacyhalos.SGA.get_galaxy_galaxydir(onegal)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
        
            # No unwise here (we do it in --coadds) and don't care about the
            # model images.

            run = legacyhalos.io.get_run(onegal, racolumn=RACOLUMN, deccolumn=DECCOLUMN, M33=args.M33)
            survey = get_survey(run, output_dir=galaxydir)
            
        # Need the object "radius" to build the coadds.
        if args.customsky:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] * 60 # [arcsec]
        else:
            if onegal[DIAMCOLUMN] > 30: # NGC0598=M33 is 61 arcmin in diameter!
                radius_mosaic_arcsec = onegal[DIAMCOLUMN] * 60 * 0.7 # [arcsec]
            elif onegal[DIAMCOLUMN] > 14 and onegal[DIAMCOLUMN] < 30:
                radius_mosaic_arcsec = onegal[DIAMCOLUMN] * 60 * 1.0 # [arcsec]
            else:
                radius_mosaic_arcsec = onegal[DIAMCOLUMN] * 60 * 1.5 # [arcsec]

        run = legacyhalos.io.get_run(onegal, racolumn=RACOLUMN, deccolumn=DECCOLUMN, M33=args.M33)
        survey = get_survey(run, output_dir=galaxydir)

        if args.coadds:
            from legacyhalos.mpi import call_custom_coadds

            # Write out the individual galaxies for this mosaic.
            thissample = fullsample[np.where(onegal['GROUP_ID'] == fullsample['GROUP_ID'])[0]]
            samplefile = os.path.join(galaxydir, '{}-largegalaxy-sample.fits'.format(galaxy))
            #print('Writing {} galaxy(ies) to {}'.format(len(thissample), samplefile))
            thissample.write(samplefile, overwrite=True)

            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               largegalaxy=True, pipeline=False, custom=False,
                               apodize=False, unwise=True, force=args.force, plots=False,
                               verbose=args.verbose, cleanup=args.cleanup, write_all_pickles=True,
                               customsky=args.customsky,
                               just_coadds=args.just_coadds, no_gaia=False, no_tycho=False,
                               require_grz=True, debug=args.debug, logfile=logfile)

        if args.pipeline_coadds:
            from legacyhalos.mpi import call_custom_coadds
            # No unwise here (we do it in --coadds) and don't care about the
            # model images.

            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               largegalaxy=False, pipeline=True, custom=False,
                               apodize=False, unwise=False, force=args.force, plots=False,
                               verbose=args.verbose, cleanup=args.cleanup, write_all_pickles=True,
                               just_coadds=args.just_coadds,
                               no_gaia=False, no_tycho=False, debug=args.debug, logfile=logfile)

        if args.ellipse:
            from legacyhalos.mpi import call_ellipse
            call_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir, pixscale=args.pixscale,
                         nproc=args.nproc, verbose=args.verbose, debug=args.debug,
                         unwise=False,
                         logfile=logfile, largegalaxy=True, pipeline=False)
                             
        if args.htmlplots:
            from legacyhalos.mpi import call_htmlplots
            if radius_mosaic_arcsec > 6 * 60: # [>6] arcmin
                barlabel = '2 arcmin'
                barlen = np.ceil(120 / args.pixscale).astype(int) # [pixels]
            elif (radius_mosaic_arcsec > 3 * 60) & (radius_mosaic_arcsec < 6 * 60): # [3-6] arcmin
                barlabel = '1 arcmin'
                barlen = np.ceil(60 / args.pixscale).astype(int) # [pixels]
            else:
                barlabel = '30 arcsec'
                barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(onegal, galaxy, survey, pixscale=args.pixscale, nproc=args.nproc,
                           verbose=args.verbose, debug=args.debug, clobber=args.clobber,
                           ccdqa=args.ccdqa, logfile=logfile, zcolumn=ZCOLUMN,
                           htmldir=htmldir, datadir=datadir,
                           barlen=barlen, barlabel=barlabel,
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           largegalaxy=True, just_coadds=args.just_coadds,
                           get_galaxy_galaxydir=legacyhalos.SGA.get_galaxy_galaxydir)

    # Wait for all ranks to finish.
    if comm is not None:
        comm.barrier()
        
    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups, _, _ = legacyhalos.SGA.missing_files(args, sample, size, clobber_overwrite=False)
        if len(groups) > 0:
            stilltodo = len(np.hstack(groups))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
