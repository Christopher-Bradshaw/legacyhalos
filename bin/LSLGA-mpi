#!/usr/bin/env python
"""MPI wrapper for the Legacy Surveys large galaxies.

time LSLGA-mpi --coadds --first 12308 --last 12308 --nproc 32 --debug --clobber # UGC01446

salloc -N 16 -C haswell -A desi -L cfs,SCRATCH -t 04:00:00 --qos interactive
srun -n 128 -c 4 --module mpich-cle6 shifter --image=docker:flagnarg/legacyhalos:latest ./LSLGA-mpi.sh > LSLGA-mpi.log3 2>&1 &

salloc -N 64 -C haswell -A desi -L cfs,SCRATCH -t 04:00:00 --qos interactive
srun -n 512 -c 4 --module mpich-cle6 shifter --image=docker:flagnarg/legacyhalos:latest ./LSLGA-mpi.sh > LSLGA-mpi.log2 2>&1 &

"""
import matplotlib
matplotlib.use('Agg')

import os, time, pdb
import numpy as np

def main():
    """Top-level wrapper.

    """
    from astropy.table import Table, hstack
    import legacyhalos.io
    import legacyhalos.mpi
    import legacyhalos.LSLGA

    from legacypipe.survey import LegacySurveyData
    from legacyhalos.mpi import (call_pipeline_coadds, call_custom_coadds, call_largegalaxy_coadds,
                                 call_htmlplots)
    from legacyhalos.LSLGA import ZCOLUMN

    lslgadir = legacyhalos.LSLGA.LSLGA_dir()
    datadir = legacyhalos.LSLGA.LSLGA_data_dir()
    htmldir = legacyhalos.LSLGA.LSLGA_html_dir()

    args = legacyhalos.LSLGA.mpi_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    if rank == 0:
        sample = legacyhalos.LSLGA.read_sample(first=args.first, last=args.last,
                                               d25min=args.d25min, d25max=args.d25max, 
                                               galaxylist=args.galaxylist,
                                               verbose=args.verbose)
    else:
        sample = None
        
    if comm:
        sample = comm.bcast(sample, root=0)

    if args.build_LSLGA:
        legacyhalos.LSLGA.build_model_LSLGA(sample, pixscale=args.pixscale, nproc=args.nproc,
                                            clobber=args.clobber)
        return

    if args.coadds and not args.count:
        kdccds_north, kdccds_south = legacyhalos.io.read_all_ccds()

    # Building the web-page and integrating the ellipse-fitting results work on
    # the full sample, so do that here and then return.
    if args.htmlindex:
        if rank == 0:
            legacyhalos.LSLGA.make_html(sample, survey=None, pixscale=args.pixscale,
                                        zcolumn=ZCOLUMN, nproc=args.nproc, clobber=args.clobber,
                                        makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                                        ccdqa=args.ccdqa)
        return
    
    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    groups, suffix = [], ''
    if rank == 0:
        suffix, groups = legacyhalos.LSLGA.missing_files_groups(args, sample, size)

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))

    if rank == 0:
        if ntodo == 0:
            print('{} for all {} galaxies are complete!'.format(
                suffix.upper(), len(sample)), flush=True)
            return
        else:
            print('{} left to do: {} / {} divided across {} group(s) and {} rank(s).'.format(
                suffix.upper(), ntodo, len(sample), len(groups), size), flush=True)

    if len(groups[rank]) == 0 or args.count:
        if len(groups[rank]) > 0 and args.debug:
            galaxy, galaxydir = legacyhalos.LSLGA.get_galaxy_galaxydir(sample[tuple(groups)])
            for ii, dd, diam in zip(groups[rank], galaxydir, sample[tuple(groups)]['GROUP_DIAMETER']):
                print('  {} {} (D25={:.3f})'.format(ii, dd, diam))
        return

    # Loop on the remaining objects.
    print('Starting {} {} on rank {} at {}'.format(len(groups[rank]), suffix.upper(),
                                                   rank, time.asctime()), flush=True)
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = legacyhalos.LSLGA.get_galaxy_galaxydir(onegal)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
        
        # Need the object "radius" to build the coadds.
        radius_mask_arcsec = onegal['GROUP_DIAMETER'] / 2 * 60     # [arcsec]
        radius_mosaic_arcsec = onegal['GROUP_DIAMETER'] * 60 * 1.5 # [arcsec]
        #radius_mask_arcsec = onegal['D25'] / 2 * 60       # [arcsec]
        #radius_mosaic_arcsec = onegal['D25'] * 60 * 2 # [arcsec]

        survey = LegacySurveyData()
        survey.output_dir = galaxydir

        if not args.coadds:
            if not legacyhalos.io.check_and_read_ccds(galaxy, survey, debug=args.debug, logfile=logfile):
                continue
        
        if args.coadds:
            if len(legacyhalos.LSLGA.missing_files(onegal, filetype='coadds')) == 1 or args.clobber:
                call_largegalaxy_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                        kdccds_north, kdccds_south,
                                        pixscale=args.pixscale, nproc=args.nproc,
                                        debug=args.debug, verbose=args.verbose, logfile=logfile,
                                        radius_mask=radius_mask_arcsec, force=args.force,
                                        racolumn='GROUP_RA', deccolumn='GROUP_DEC',
                                        # Note!
                                        apodize=False, cleanup=False, write_all_pickles=True)

        if args.htmlplots:
            barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(Table(onegal), galaxy, survey, args.pixscale, args.nproc,
                           args.debug, args.clobber, args.verbose, args.ccdqa, logfile,
                           ZCOLUMN, htmldir, datadir, pipeline_montage=True,
                           barlen=barlen, barlabel='30 arcsec',
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           get_galaxy_galaxydir=legacyhalos.LSLGA.get_galaxy_galaxydir)
            
    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups = legacyhalos.LSLGA.missing_files_groups(args, sample, size)
        if len(groups) > 0:
            stilltodo = len(np.hstack(np.atleast_1d(groups)))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
