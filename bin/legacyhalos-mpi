#!/usr/bin/env python

"""
MPI wrapper for legacyhalos_coadds.
"""

from __future__ import absolute_import, division, print_function

import os, sys, glob, time, subprocess
import argparse

import numpy as np

PIXSCALE = 0.262

def init_survey():
    """Instantiate the LegacySurveyData object."""
    from legacypipe.survey import LegacySurveyData

    dr5_dir = os.path.join(os.sep, 'project', 'projectdirs', 'cosmo', 'data', 'legacysurvey', 'dr5')
    return LegacySurveyData(cache_dir=dr5_dir)

def _missing(sample, comm=None, filetype='coadds'):
    """Find missing data of a given filetype."""
    
    from legacyhalos.io import get_objid

    if comm is None:
        rank, size = 0, 1
    else:
        rank, size = comm.rank, comm.size

    if filetype == 'coadds':
        filesuffix = 'resid.jpg'
    else:
        print('Unrecognized file type!')
        raise ValueError

    objid, objdir = get_objid(sample)

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)
    
    for ii, (objid1, objdir1) in enumerate( zip(objid, objdir) ):
        residfile = os.path.join(objdir1, '{}-{}'.format(objid1, filesuffix))
        if os.path.exists(residfile):
            todo[ii] = False

    if np.sum(todo) == 0:
        if rank == 0:
            print('All galaxies of filetype {} have been processed!'.format(filetype))
        return list()
    else:
        indices[todo]

    groups = np.array_split(indices, size)

    return groups

def missing_coadds(sample, comm=None):
    '''Find the galaxies that do not yet have coadds

    '''
    return _missing(sample, comm=None, filetype='coadds')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--ncpu', type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--mpi', action='store_true', help='Use MPI parallelism')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose output.')

    args = parser.parse_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank = comm.Get_rank()
    else:
        comm = None
        rank = 0

    if os.getenv('NERSC_HOST') == 'cori':
        maxproc = 64
    elif os.getenv('NERSC_HOST') == 'edison':
        maxproc = 48
    else:
        maxproc = 4

    if args.ncpu is None:
        args.ncpu = maxproc // 2

    # Read the sample to see how many more galaxies we need to process.
    if rank == 0:

        import legacyhalos.io
        from astrometry.util.fits import merge_tables

        sample = legacyhalos.io.read_catalog(extname='LSPHOT', upenn=True,
                                             columns=('ra', 'dec', 'bx', 'by', 'brickname', 'objid'))
        rm = legacyhalos.io.read_catalog(extname='REDMAPPER', upenn=True,
                                         columns=('mem_match_id', 'z', 'r_lambda'))
        sample.add_columns_from(rm)

        print('Hack -- 5 galaxies!')
        sample = sample[1050:1055]
        print('Read {} galaxies.'.format(len(sample)))

        if False:
            # Build the coadds
            legacyhalos_coadds(sample, comm=comm, ncpu=args.ncpu, verbose=args.verbose)

        # Do ellipse fitting
        legacyhalos_ellipse(sample, comm=comm, ncpu=args.ncpu, verbose=args.verbose)

def legacyhalos_ellipse(sample, ncpu=1, comm=None, verbose=False):
    """Do ellipse-fitting.

    """
    import fitsio
    from legacyhalos.io import get_objid
    from legacyhalos.coadds import legacyhalos_coadds

    if comm is None:
        rank, size = 0, 1
    else:
        rank, size = comm.rank, comm.size

    import matplotlib.pyplot as plt
    from photutils.isophote import EllipseGeometry, Ellipse
    from photutils import EllipticalAperture

    objid, objdir = get_objid(sample)
    
    for objid1, objdir1 in zip(objid, objdir):

        data = fitsio.read(os.path.join(objdir1, '{}-image-r.fits.fz'.format(objid1)))
        model = fitsio.read(os.path.join(objdir1, '{}-model-r.fits.fz'.format(objid1)))
        resid = data - model
        nx, ny = resid.shape
        
        resid = resid[(nx//2-50):(nx//2+50), (ny//2-50):(ny//2+50)]
        nx, ny = resid.shape
        print(nx, ny)

        geometry = EllipseGeometry(x0=nx/2, y0=ny/2, sma=nx*0.05,
                                   eps=0.5, pa=np.radians(130))

        aper = EllipticalAperture((geometry.x0, geometry.y0), geometry.sma,
                                  geometry.sma*(1 - geometry.eps), geometry.pa)
        plt.imshow(resid, origin='lower')
        aper.plot(color='white')
        plt.show()
        
        # Fit the image
        ellipse = Ellipse(resid, geometry)
        
        isolist = ellipse.fit_image()
        print(isolist.to_table())


        plt.figure(figsize=(8, 4))

        plt.scatter(isolist.sma**0.25, 22.5-2.5*np.log10(isolist.intens))
        plt.xlabel('sma**1/4')
        plt.ylabel('Magnitude')
        plt.gca().invert_yaxis()

        plt.show()


        # Make a plot!
        plt.figure(figsize=(8, 8))
        plt.subplots_adjust(hspace=0.35, wspace=0.35)

        plt.subplot(2, 2, 1)
        plt.errorbar(isolist.sma, isolist.eps, yerr=isolist.ellip_err,
                     fmt='o', markersize=4)
        plt.xlabel('Semimajor Axis Length (pix)')
        plt.ylabel('Ellipticity')

        plt.subplot(2, 2, 2)
        plt.errorbar(isolist.sma, isolist.pa/np.pi*180.,
                     yerr=isolist.pa_err/np.pi* 80., fmt='o', markersize=4)
        plt.xlabel('Semimajor Axis Length (pix)')
        plt.ylabel('PA (deg)')

        plt.subplot(2, 2, 3)
        plt.errorbar(isolist.sma, isolist.x0, yerr=isolist.x0_err, fmt='o',
                     markersize=4)
        plt.xlabel('Semimajor Axis Length (pix)')
        plt.ylabel('x0')

        plt.subplot(2, 2, 4)
        plt.errorbar(isolist.sma, isolist.y0, yerr=isolist.y0_err, fmt='o',
                     markersize=4)
        plt.xlabel('Semimajor Axis Length (pix)')
        plt.ylabel('y0')

        plt.show()
        
        import pdb ; pdb.set_trace()
        
def legacyhalos_coadds(sample, ncpu=1, comm=None, verbose=False):
    """Generate the coadds.

    """
    from legacyhalos.io import get_objid
    from legacyhalos.coadds import legacyhalos_coadds

    if comm is None:
        rank, size = 0, 1
    else:
        rank, size = comm.rank, comm.size

    # Determine how many more coadds we need to make and chunk them.
    t0 = time.time()
    if rank == 0:
        print('Starting at {}'.format(time.asctime()))

    groups = missing_coadds(sample, comm=comm)
    if len(groups) == 0:
        return

    #sys.stdout.flush()
    #if comm is not None:
    #    indices = comm.bcast(indices, root=0)

    # Initialize and then broadcast the LegacySurveyData() object to all ranks.
    if rank == 0:
        survey = init_survey()
        
    if comm is not None:
        survey = comm.bcast(survey, root=0)
        groups = comm.bcast(groups, root=0)
        sample = comm.bcast(sample, root=0)

    # Loop on the remaining objects.
    for ii in groups[rank]:

        objid, objdir = get_objid(sample[ii])

        logfile = os.path.join(objdir, '{}-coadds.log'.format(objid))
        print('LOGGING to {}'.format(logfile))

        print('---- rank {} objid {} {}'.format(rank, objid, time.asctime()))
        sys.stdout.flush()

        try:
            t0 = time.time()
            with open(logfile, 'a') as log:
                #sys.stdout = log
                #sys.stderr = log
                err = legacyhalos_coadds(sample[ii], survey=survey, objid=objid, objdir=objdir,
                                         ncpu=ncpu, pixscale=PIXSCALE, verbose=verbose)
            
            runtime = (time.time()-t0) / 60
            print('SUCCESS: objid {} coadds on rank {} took {:.1f} minutes'.format(objid, rank, runtime))

        except:
            print('FAILED: objid {} coadds on rank {} raised an exception'.format(objid, rank))
            import traceback
            traceback.print_exc()

    print('---- rank {} is done'.format(rank))
    sys.stdout.flush()

    if comm is not None:
        comm.barrier()

    #if rank == 0:
    #    for outfile in zbfiles:
    #        if not os.path.exists(outfile):
    #            print('ERROR missing {}'.format(outfile))

        print('All done at {}'.format(time.asctime()))

if __name__ == '__main__':
    main()
