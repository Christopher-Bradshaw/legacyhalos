#!/usr/bin/env python
"""MPI wrapper for the various computationally intensive legacyhalos analysis. 

ls hsc-data/8/*/*/* | grep -v ccddata | tar -cvf hsc-legacysurveys.tar.gz -T -

"""
import matplotlib
matplotlib.use('Agg')

import os, sys, time, pdb
import argparse
import numpy as np
from astropy.table import Table
from contextlib import redirect_stdout, redirect_stderr

from astrometry.util.fits import fits_table
from legacypipe.survey import LegacySurveyData

import legacyhalos.io
import legacyhalos.hsc
import legacyhalos.coadds
import legacyhalos.html

def get_survey_dir(onegal):
    if onegal['RELEASE'] == 6000:
        return '/global/project/projectdirs/cosmo/work/legacysurvey/dr6'
    elif onegal['RELEASE'] == 7000 or onegal['RELEASE'] == 7001:
        return '/global/project/projectdirs/cosmo/work/legacysurvey/dr7'
    else:
        print('Unrecognized DR!')
        raise ValueError
    return

def missing_files(sample, filetype='coadds', size=1, htmldir=None,
                  hsc=False, clobber=False):
    """Find missing data of a given filetype."""    

    if filetype == 'coadds':
        filesuffix = '-pipeline-resid-grz.jpg'
    elif filetype == 'custom_coadds':
        filesuffix = '-custom-resid-grz.jpg'
    elif filetype == 'ellipse':
        filesuffix = '-ellipsefit.p'
    elif filetype == 'sersic':
        filesuffix = '-sersic-single.p'
    elif filetype == 'html':
        filesuffix = '-ccdpos.png'
        #filesuffix = '-sersic-exponential-nowavepower.png'
    else:
        print('Unrecognized file type!')
        raise ValueError

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)

    if filetype == 'html':
        if hsc:
            galaxy, _, galaxydir = legacyhalos.hsc.get_galaxy_galaxydir(sample, htmldir=htmldir, html=True)
        else:
            galaxy, _, galaxydir = legacyhalos.io.get_galaxy_galaxydir(sample, htmldir=htmldir, html=True)
    else:
        if hsc:
            galaxy, galaxydir = legacyhalos.hsc.get_galaxy_galaxydir(sample, htmldir=htmldir)
        else:
            galaxy, galaxydir = legacyhalos.io.get_galaxy_galaxydir(sample, htmldir=htmldir)

    for ii, (gal, gdir) in enumerate( zip(np.atleast_1d(galaxy), np.atleast_1d(galaxydir)) ):
        checkfile = os.path.join(gdir, '{}{}'.format(gal, filesuffix))
        if os.path.exists(checkfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices = indices[todo]
        
    return np.array_split(indices, size)

def _missing_files(args, sample, size, htmldir=None):
    """Simple task-specific wrapper on missing_files."""
    if args.coadds:
        suffix = 'coadds'
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc,
                               clobber=args.clobber, htmldir=htmldir)
    elif args.custom_coadds:
        suffix = 'custom_coadds'
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc,
                               clobber=args.clobber, htmldir=htmldir)
    elif args.ellipse:
        suffix = 'ellipse'
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc,
                               clobber=args.clobber, htmldir=htmldir)
    elif args.sersic:
        suffix = 'sersic'
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc,
                               clobber=args.clobber, htmldir=htmldir)
    elif args.sky:
        suffix = 'sky'
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc,
                               clobber=args.clobber, htmldir=htmldir)
    elif args.htmlplots:
        suffix = 'html'
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc,
                               clobber=args.clobber, htmldir=htmldir)
    else:
        suffix = ''
        groups = []

    return suffix, groups

def _call_pipeline_coadds(onegal, galaxy, radius_mosaic, survey, pixscale,
                          nproc, force, debug, logfile):
    """Wrapper script to build the pipeline coadds."""
    t0 = time.time()
    if debug:
        err = legacyhalos.coadds.pipeline_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                 survey=survey, pixscale=pixscale,
                                                 nproc=nproc, force=force)
        if err == 0:
            print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
        print('Finished galaxy {} in {:.3f} minutes.'.format(
              galaxy, (time.time() - t0)/60), flush=True)
    else:
        with open(logfile, 'w') as log:
            with redirect_stdout(log), redirect_stderr(log):
                print('Started working on galaxy {} at {}'.format(
                        galaxy, time.asctime()), flush=True, file=log)
                err = legacyhalos.coadds.pipeline_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                         survey=survey, pixscale=pixscale,
                                                         nproc=nproc, force=force, log=log)
                if err == 0:
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
                print('Finished galaxy {} at {} in {:.3f} minutes.'.format(
                      galaxy, time.asctime(), (time.time() - t0)/60), flush=True, file=log)

def _call_custom_coadds(onegal, galaxy, radius_mosaic, survey, pixscale,
                        nproc, debug, logfile):
    """Wrapper script to build the pipeline coadds."""
    t0 = time.time()
    if debug:
        err = legacyhalos.coadds.custom_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                               survey=survey, pixscale=pixscale, nproc=nproc)
        if err == 0:
            print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
        print('Finished galaxy {} in {:.3f} minutes.'.format(
            galaxy, (time.time() - t0)/60), flush=True)
    else:
        with open(logfile, 'w') as log:
            with redirect_stdout(log), redirect_stderr(log):
                print('Started working on galaxy {} at {}'.format(
                        galaxy, time.asctime()), flush=True, file=log)
                err = legacyhalos.coadds.custom_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                       survey=survey, pixscale=pixscale,
                                                       nproc=nproc, log=log)
                if err == 0:
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
                print('Finished galaxy {} at {} in {:.3f} minutes.'.format(
                    galaxy, time.asctime(), (time.time() - t0)/60), flush=True, file=log)

def _call_ellipse(onegal, galaxy, pixscale, verbose, debug, logfile, hsc):
    """Wrapper script to do ellipse-fitting.

    """
    import legacyhalos.ellipse
    
    t0 = time.time()
    if debug:
        err = legacyhalos.ellipse.legacyhalos_ellipse(onegal, pixscale=pixscale,
                                                      verbose=verbose, debug=debug,
                                                      noellipsefit=True, hsc=hsc)
        if err == 0:
            print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
        print('Finished galaxy {} in {:.3f} minutes.'.format(
            galaxy, (time.time() - t0)/60), flush=True)
    else:
        with open(logfile, 'w') as log:
            with redirect_stdout(log), redirect_stderr(log):
                err = legacyhalos.ellipse.legacyhalos_ellipse(onegal, pixscale=pixscale,
                                                              verbose=verbose, debug=debug,
                                                              noellipsefit=True, hsc=hsc)
                if err == 0:
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
                print('Finished galaxy {} at {} in {:.3f} minutes.'.format(
                      galaxy, time.asctime(), (time.time() - t0)/60), flush=True)
            if err == 0:
                print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)

def _call_sersic(onegal, galaxy, galaxydir, seed, verbose, debug, logfile, hsc):
    """Wrapper script to do Sersic-fitting.

    """
    import legacyhalos.sersic

    t0 = time.time()
    if debug:
        err = legacyhalos.sersic.legacyhalos_sersic(onegal, galaxy=galaxy, galaxydir=galaxydir,
                                                    debug=debug, verbose=verbose, seed=seed)
        if err == 0:
            print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
        print('Finished galaxy {} in {:.3f} minutes.'.format(
            galaxy, (time.time() - t0)/60), flush=True)
    else:
        with open(logfile, 'w') as log:
            with redirect_stdout(log), redirect_stderr(log):
                err = legacyhalos.sersic.legacyhalos_sersic(onegal, galaxy=galaxy, galaxydir=galaxydir,
                                                            debug=debug, verbose=verbose, seed=seed)
                if err == 0:
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
                print('Finished galaxy {} at {} in {:.3f} minutes.'.format(
                      galaxy, time.asctime(), (time.time() - t0)/60), flush=True)
            if err == 0:
                print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)

def _call_htmlplots(onegal, galaxy, survey, pixscale, nproc, debug, clobber,
                    verbose, logfile, hsc, htmldir):
    """Wrapper script to build the pipeline coadds."""
    t0 = time.time()

    if debug:
        if hsc:
            err = legacyhalos.html.make_plots(onegal, datadir=None, htmldir=htmldir,
                                              pixscale=pixscale, survey=survey, clobber=clobber,
                                              verbose=verbose, nproc=nproc,
                                              ccdqa=True, maketrends=False, hsc=True)
        else:
            err = legacyhalos.html.make_plots(onegal, datadir=None, htmldir=htmldir,
                                              pixscale=pixscale, survey=survey, clobber=clobber,
                                              verbose=verbose, nproc=nproc,
                                              ccdqa=True, maketrends=False)
            
        if err == 0:
            print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
        print('Finished galaxy {} in {:.3f} minutes.'.format(
            galaxy, (time.time() - t0)/60), flush=True)
    else:
        with open(logfile, 'w') as log:
            with redirect_stdout(log), redirect_stderr(log):
                print('Started working on galaxy {} at {}'.format(
                  galaxy, time.asctime()), flush=True, file=log)
                if hsc:
                    err = legacyhalos.html.make_plots(onegal, datadir=None, htmldir=htmldir,
                                                      pixscale=pixscale, survey=survey, clobber=clobber,
                                                      verbose=verbose, nproc=nproc,
                                                      ccdqa=True, maketrends=False, hsc=True)
                else:
                    err = legacyhalos.html.make_plots(onegal, datadir=None, htmldir=htmldir,
                                                      pixscale=pixscale, survey=survey, clobber=clobber,
                                                      verbose=verbose, nproc=nproc,
                                                      ccdqa=True, maketrends=False)
                if err == 0:
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
                print('Finished galaxy {} at {} in {:.3f} minutes.'.format(
                      galaxy, time.asctime(), (time.time() - t0)/60), flush=True, file=log)

def main():
    from contextlib import redirect_stdout, redirect_stderr

    parser = argparse.ArgumentParser()
    parser.add_argument('--nproc', default=4, type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--pixscale', default=0.262, type=float, help='pixel scale (arcsec/pix).')
    parser.add_argument('--mpi', action='store_true', help='Use MPI parallelism')

    parser.add_argument('--hsc', action='store_true', help='Analyze the HSC massive-galaxy sample.')

    parser.add_argument('--first', type=int, help='Index of first object to process.')
    parser.add_argument('--last', type=int, help='Index of last object to process.')
    parser.add_argument('--seed', type=int, default=None, help='Random seed (used with --sky and --sersic).')

    parser.add_argument('--coadds', action='store_true', help='Build the pipeline coadds.')
    parser.add_argument('--custom-coadds', action='store_true', help='Build the custom coadds.')
    parser.add_argument('--ellipse', action='store_true', help='Do the ellipse fitting.')
    parser.add_argument('--sersic', action='store_true', help='Perform Sersic fitting.')
    parser.add_argument('--sky', action='store_true', help='Estimate the sky variance.')
    parser.add_argument('--htmlplots', action='store_true', help='Build the HTML output.')
    parser.add_argument('--htmlindex', action='store_true', help='Build HTML index.html page.')

    parser.add_argument('--htmldir', type=str, help='Output directory for HTML files.')
    
    parser.add_argument('--force', action='store_true', help='Use with --coadds; ignore previous pickle files.')
    parser.add_argument('--count', action='store_true', help='Count how many objects are left to analyze and then return.')
    parser.add_argument('--nomakeplots', action='store_true', help='Do not remake the QA plots for the HTML pages.')

    parser.add_argument('--debug', action='store_true', help='Log to STDOUT and build debugging plots.')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose output.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')                                
    args = parser.parse_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    if rank == 0:
        if args.hsc:
            sample = legacyhalos.hsc.read_parent(first=args.first, last=args.last)
        else:
            sample = legacyhalos.io.read_paper2_sample(first=args.first, last=args.last)
    else:
        sample = None

    if comm:
        sample = comm.bcast(sample, root=0)

    if args.htmlindex:
        if rank == 0:
            if args.hsc:
                legacyhalos.hsc.make_html(sample, survey=None, pixscale=args.pixscale,
                                          nproc=args.nproc, clobber=args.clobber, makeplots=False,
                                          verbose=args.verbose, htmldir=args.htmldir)
            else:
                legacyhalos.html.make_html(sample, survey=None, pixscale=args.pixscale,
                                           nproc=args.nproc, clobber=args.clobber, makeplots=False,
                                           verbose=args.verbose, htmldir=args.htmldir)
        return

    # Determine how many more objects we need to analyze and divide them
    # across ranks.
    groups, suffix = [], ''
    if rank == 0:
        suffix, groups = _missing_files(args, sample, size, args.htmldir)

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))
        
    if rank == 0:
        if ntodo == 0:
            print('{} for all {} galaxies are complete!'.format(
                suffix.upper(), len(sample)), flush=True)
            return
        else:
            print('{} left to do: {} / {} divided across {} group(s) and {} rank(s).'.format(
                suffix.upper(), ntodo, len(sample), len(groups), size), flush=True)

    if len(groups[rank]) == 0 or args.count:
        if len(groups[rank]) > 0 and args.debug:
            if args.hsc:
                galaxy, galaxydir = legacyhalos.hsc.get_galaxy_galaxydir(sample[groups], htmldir=args.htmldir)
            else:
                galaxy, galaxydir = legacyhalos.io.get_galaxy_galaxydir(sample[groups], htmldir=args.htmldir)
            for ii, dd in zip(groups[rank], galaxydir):
                print('  {} {}'.format(ii, dd))
            #[print('  {}'.format(dd)) for dd in np.atleast_1d(galaxydir)]
        return

    # Loop on the remaining objects.
    print('Starting {} {} at {}'.format(ntodo, suffix.upper(), time.asctime()), flush=True)
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        if (count+1) % 10 == 0:
            print('Rank {}: Building {} {} / {}'.format(
                rank, suffix.upper(), count+1, len(groups[rank])), flush=True)

        onegal = sample[ii]
        if args.hsc:
            galaxy, galaxydir = legacyhalos.hsc.get_galaxy_galaxydir(onegal, htmldir=args.htmldir)
        else:
            galaxy, galaxydir = legacyhalos.io.get_galaxy_galaxydir(onegal, htmldir=args.htmldir)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
            print('Logging to {} '.format(logfile), flush=True)

        # Need the cluster "radius" to build the coadds.
        if args.coadds or args.custom_coadds or args.htmlplots:
            radius_mosaic_arcsec = legacyhalos.misc.cutout_radius_150kpc(redshift=onegal['Z']) # [arcsec]

            survey = LegacySurveyData()
            survey.survey_dir = get_survey_dir(onegal)
            survey.output_dir = galaxydir

        if args.coadds:
            _call_pipeline_coadds(onegal, galaxy, radius_mosaic_arcsec, survey, args.pixscale,
                                  args.nproc, args.force, args.debug, logfile)
                    
        if args.custom_coadds or args.htmlplots:
            ccdsfile = os.path.join(survey.output_dir, '{}-ccds.fits'.format(galaxy))
            if not os.path.isfile(ccdsfile):
                if args.debug:
                    print('CCDs file {} not found.'.format(ccdsfile), flush=True)
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
                else:
                    with open(logfile, 'w') as log:
                        print('CCDs file {} not found.'.format(ccdsfile), flush=True, file=log)
                        print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
                return
            survey.ccds = survey.cleanup_ccds_table(fits_table(ccdsfile))

        if args.custom_coadds:
            _call_custom_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                args.pixscale, args.nproc, args.debug, logfile)
                    
        if args.ellipse:
            _call_ellipse(onegal, galaxy, args.pixscale, args.verbose,
                          args.debug, logfile, args.hsc)
                        
        if args.sersic:
            _call_sersic(onegal, galaxy, galaxydir, args.seed, args.verbose,
                         args.debug, logfile, args.hsc)
            
        if args.sky:
            from legacyhalos.sky import legacyhalos_sky
            if args.debug:
                err = legacyhalos_sky(sample[ii], survey=survey, galaxy=galaxy, objdir=objdir,
                                         nproc=args.nproc, pixscale=args.pixscale, seed=args.seed,
                                         debug=args.debug, verbose=args.verbose, force=args.force)
                if err == 0:
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
                print('Finished galaxy {} in {:.3f} minutes.'.format(
                    galaxy, (time.time() - t0)/60), flush=True)
            else:
                with open(logfile, 'w') as log:
                    with redirect_stdout(log), redirect_stderr(log):
                        print('Rank {} started working on galaxy {} at {}'.format(
                            rank, galaxy, time.asctime()), flush=True)
                        err = legacyhalos_sky(sample[ii], survey=survey, galaxy=galaxy, objdir=objdir,
                                                 nproc=args.nproc, pixscale=args.pixscale, seed=args.seed,
                                                 debug=args.debug, verbose=args.verbose, log=log,
                                                 force=args.force)
                        if err == 0:
                            print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
                        print('Rank {} finished galaxy {} at {} in {:.3f} minutes.'.format(
                            rank, galaxy, time.asctime(), (time.time() - t0)/60), flush=True)
                if err == 0:
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)

        if args.htmlplots:
            _call_htmlplots(Table(onegal), galaxy, survey, args.pixscale, args.nproc,
                            args.debug, args.clobber, args.verbose, logfile, args.hsc,
                            args.htmldir)

    #if args.html and rank == 0:
    #    if args.hsc:
    #        legacyhalos.hsc.make_html(sample, survey=survey, pixscale=args.pixscale,
    #                                  nproc=args.nproc, clobber=args.clobber, makeplots=False,
    #                                  verbose=args.verbose, htmldir=args.htmldir)
    #    else:
    #        legacyhalos.html.make_html(sample, survey=survey, pixscale=args.pixscale,
    #                                   nproc=args.nproc, clobber=args.clobber, makeplots=False,
    #                                   verbose=args.verbose, htmldir=args.htmldir)

    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc, clobber=args.clobber)
        if len(groups) > 0:
            stilltodo = len(np.hstack(np.atleast_1d(groups)))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
