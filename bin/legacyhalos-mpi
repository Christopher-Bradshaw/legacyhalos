#!/usr/bin/env python

"""MPI wrapper for the various computationally intensive legacyhalos analysis
steps.

python -u legacyanalysis/extract-calibs.py --drdir /project/projectdirs/cosmo/data/legacysurvey/dr5 --radec 342.4942 -0.6706 --width 300 --height 300

time legacyhalos-mpi --first 0 --last 0 --custom-coadds --ncpu 4 --dry-run --debug

To get 24 MPI tasks and 8 cores per MPI task for multiprocessing, on cori I do 
  srun -N 6 -n 24 -c 8
and on edison
  srun -N 8 -n 24 -c 8

where N = 8 * 24 / 32 (e.g., on cori).

"""
from __future__ import absolute_import, division, print_function

import os, sys, time, pdb
import argparse
import numpy as np

import legacyhalos.io

def _missing(sample, size=1, filetype='coadds', clobber=False):
    """Find missing data of a given filetype."""    

    if filetype == 'coadds':
        filesuffix = 'image-central.jpg'
    elif filetype == 'ellipse':
        filesuffix = 'ellipsefit.p'
    elif filetype == 'sersic':
        filesuffix = 'sersic-single.p'
    elif filetype == 'sky':
        filesuffix = 'ellipsefit-sky.p'
    else:
        print('Unrecognized file type!')
        raise ValueError

    objid, objdir = legacyhalos.io.get_objid(sample)

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)
    
    for ii, (objid1, objdir1) in enumerate( zip(np.atleast_1d(objid), np.atleast_1d(objdir)) ):
        residfile = os.path.join(objdir1, '{}-{}'.format(objid1, filesuffix))
        if os.path.exists(residfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices = indices[todo]
    return np.array_split(indices, size)

def missing_coadds(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have coadds.'''
    return _missing(sample, size=size, filetype='coadds',
                    clobber=clobber)

def missing_ellipse(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have ellipse fits.'''
    return _missing(sample, size=size, filetype='ellipse',
                    clobber=clobber)

def missing_sersic(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have Sersic fits.'''
    return _missing(sample, size=size, filetype='sersic',
                    clobber=clobber)

def missing_sky(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have sky variance estimates.'''
    return _missing(sample, size=size, filetype='sky',
                    clobber=clobber)

def main():
    from contextlib import redirect_stdout, redirect_stderr

    parser = argparse.ArgumentParser()
    parser.add_argument('--ncpu', default=4, type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--pixscale', default=0.262, type=float, help='pixel scale (arcsec/pix).')
    parser.add_argument('--mpi', action='store_true', help='Use MPI parallelism')

    parser.add_argument('--first', type=int, help='Index of first object to process.')
    parser.add_argument('--last', type=int, help='Index of last object to process.')
    parser.add_argument('--seed', type=int, default=None, help='Random seed (used with --sky).')

    parser.add_argument('--coadds', action='store_true', help='Build the custom coadds')
    parser.add_argument('--ellipse', action='store_true', help='Do the ellipse fitting.')
    parser.add_argument('--sersic', action='store_true', help='Perform Sersic fitting.')
    parser.add_argument('--sky', action='store_true', help='Estimate the sky variance.')
    
    parser.add_argument('--force', action='store_true', help='Use with --coadds; ignore previous pickle files.')
    parser.add_argument('--count', action='store_true', help='Count how many objects are left to analyze and then return.')
    parser.add_argument('--debug', action='store_true', help='Log to STDOUT and build debugging plots.')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose output.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')                                
    args = parser.parse_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read the sample and initialize the LegacySurveyData() object.
    if rank == 0:
        print('LEGACYHALOS_DIR = {}'.format( legacyhalos.io.analysis_dir() ))
        sample = legacyhalos.io.read_sample(first=args.first, last=args.last)
        if args.coadds:
            print('Initializing the LegacySurveyData object.')
            from legacypipe.survey import LegacySurveyData
            survey = LegacySurveyData()
        else:
            survey = None
    else:
        sample = None
        survey = None

    if comm:
        sample = comm.bcast(sample, root=0)
        survey = comm.bcast(survey, root=0)

    #objid, objdir = legacyhalos.io.get_objid(sample) 

    # Determine how many more objects we need to analyze and divide them
    # across ranks.
    groups, suffix = [], ''
    if rank == 0:
        if args.coadds:
            groups = missing_coadds(sample, size=size, clobber=args.clobber)
            suffix = 'coadds'
        elif args.ellipse:
            groups = missing_ellipse(sample, size=size, clobber=args.clobber)
            suffix = 'ellipse'
        elif args.sersic:
            groups = missing_sersic(sample, size=size, clobber=args.clobber)
            suffix = 'sersic'
        elif args.sky:
            groups = missing_sky(sample, size=size, clobber=args.clobber)
            suffix = 'sky'
        else:
            groups = []

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))
        
    if rank == 0:
        if ntodo == 0:
            print('{} for all {} galaxies are complete!'.format(
                suffix.upper(), len(sample)), flush=True)
            return
        else:
            print('{} left to do: {} / {} divided across {} group(s) and {} rank(s).'.format(
                suffix.upper(), ntodo, len(sample), len(groups), size), flush=True)

    if len(groups[rank]) == 0 or args.count:
        if len(groups[rank]) > 0 and args.debug:
            objid, objdir = legacyhalos.io.get_objid(sample[groups])
            #[print('  {} {}'.format(ii, dd)) for ii, dd in zip(np.atleast_1d(groups), np.atleast_1d(objdir))]
            [print('  {}'.format(dd)) for dd in np.atleast_1d(objdir)]
        return

    # Loop on the remaining objects.
    print('Starting {} {} at {}'.format(ntodo, suffix.upper(), time.asctime()), flush=True)
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        if (count % 10) == 0:
            print('Rank {}: Building {} {} / {}'.format(
                rank, suffix.upper(), count+1, len(groups[rank])), flush=True)

        objid, objdir = legacyhalos.io.get_objid(sample[ii])

        if not args.debug:
            logfile = os.path.join(objdir, '{}-{}.log'.format(objid, suffix))
            print('Logging to {} '.format(logfile), flush=True)

        t0 = time.time()
        if args.coadds:
            from legacyhalos.coadds import legacyhalos_custom_coadds
            if args.debug:
                result = legacyhalos_custom_coadds(
                    sample[ii], survey=survey, objid=objid, objdir=objdir,
                    ncpu=args.ncpu, pixscale=args.pixscale, force=args.force)
                if result == 0:
                    print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                print('Finished objid {} in {:.3f} minutes.'.format(
                    objid, (time.time() - t0)/60), flush=True)
            else:
                with open(logfile, 'w') as log:
                    #with redirect_stdout(log), redirect_stderr(log):
                    print('Rank {} started working on objid {} at {}'.format(
                        rank, objid, time.asctime()), flush=True, file=log)
                    result = legacyhalos_custom_coadds(
                        sample[ii], survey=survey, objid=objid, objdir=objdir, ncpu=args.ncpu, 
                        pixscale=args.pixscale, log=log, force=args.force)
                    if result == 0:
                        print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True, file=log)
                    print('Rank {} finished objid {} at {} in {:.3f} minutes.'.format(
                        rank, objid, time.asctime(), (time.time() - t0)/60), flush=True, file=log)
                    
        if args.ellipse:
            from legacyhalos.ellipse import legacyhalos_ellipse
            if args.debug:
                result = legacyhalos_ellipse(
                    sample[ii], objid=objid, objdir=objdir, ncpu=args.ncpu,
                    pixscale=args.pixscale, debug=args.debug, verbose=args.verbose)
                if result == 0:
                    print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                print('Finished objid {} in {:.3f} minutes.'.format(
                    objid, (time.time() - t0)/60), flush=True)
            else:
                with open(logfile, 'w') as log:
                    with redirect_stdout(log), redirect_stderr(log):
                        print('Rank {} started working on objid {} at {}'.format(
                            rank, objid, time.asctime()), flush=True)
                        result = legacyhalos_ellipse(
                            sample[ii], objid=objid, objdir=objdir, ncpu=args.ncpu,
                            pixscale=args.pixscale, debug=args.debug, verbose=args.verbose)
                        if result == 0:
                            print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                        print('Rank {} finished objid {} at {} in {:.3f} minutes.'.format(
                            rank, objid, time.asctime(), (time.time() - t0)/60), flush=True)
                if result == 0:
                    print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                        
        if args.sersic:
            from legacyhalos.sersic import legacyhalos_sersic
            if args.debug:
                result = legacyhalos_sersic(sample[ii], objid=objid, objdir=objdir, 
                                            debug=args.debug, verbose=args.verbose,
                                            seed=args.seed)
                if result == 0:
                    print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                print('Finished objid {} in {:.3f} minutes.'.format(
                    objid, (time.time() - t0)/60), flush=True)
            else:
                with open(logfile, 'w') as log:
                    with redirect_stdout(log), redirect_stderr(log):
                        print('Rank {} started working on objid {} at {}'.format(
                            rank, objid, time.asctime()), flush=True)
                        result = legacyhalos_sersic(sample[ii], objid=objid, objdir=objdir, 
                                                    debug=args.debug, verbose=args.verbose,
                                                    seed=args.seed)
                        if result == 0:
                            print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                        print('Rank {} finished objid {} at {} in {:.3f} minutes.'.format(
                            rank, objid, time.asctime(), (time.time() - t0)/60), flush=True)
                if result == 0:
                    print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                        
        if args.sky:
            from legacyhalos.sky import legacyhalos_sky
            if args.debug:
                result = legacyhalos_sky(sample[ii], survey=survey, objid=objid, objdir=objdir,
                                         ncpu=args.ncpu, pixscale=args.pixscale, seed=args.seed,
                                         debug=args.debug, verbose=args.verbose, force=args.force)
                if result == 0:
                    print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                print('Finished objid {} in {:.3f} minutes.'.format(
                    objid, (time.time() - t0)/60), flush=True)
            else:
                with open(logfile, 'w') as log:
                    with redirect_stdout(log), redirect_stderr(log):
                        print('Rank {} started working on objid {} at {}'.format(
                            rank, objid, time.asctime()), flush=True)
                        result = legacyhalos_sky(sample[ii], survey=survey, objid=objid, objdir=objdir,
                                                 ncpu=args.ncpu, pixscale=args.pixscale, seed=args.seed,
                                                 debug=args.debug, verbose=args.verbose, log=log,
                                                 force=args.force)
                        if result == 0:
                            print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                        print('Rank {} finished objid {} at {} in {:.3f} minutes.'.format(
                            rank, objid, time.asctime(), (time.time() - t0)/60), flush=True)
                if result == 0:
                    print('ERROR: objid {}; please check the logfile.'.format(objid), flush=True)
                        
    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        if args.coadds:
            groups = missing_coadds(sample, size=size, clobber=args.clobber)
        if args.ellipse:
            groups = missing_ellipse(sample, size=size, clobber=args.clobber)

        if len(groups) > 0:
            stilltodo = len(np.hstack(np.atleast_1d(groups)))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
