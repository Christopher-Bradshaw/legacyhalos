#!/usr/bin/env python

"""MPI wrapper for the various computationally intensive legacyhalos analysis
steps.

/global/cscratch1/sd/desiproc/dr5-new
/global/cscratch1/sd/dstn/dr6plus

For unWISE coadds, in tractor/wise/unwise.py, you'll probably have to use
unwise_tiles_touching_wcs to get the tiles overlapping, and then maybe
get_unwise_tractor_image to read the data, and then maybe legacypipe/coadds.py :
quick_coadds ?

legacyhalos-mpi --custom-coadds --clobber --ncpu 6


"""
from __future__ import absolute_import, division, print_function

import os, sys, time
import argparse
import numpy as np

def get_ncpu():
    """Get the number of CPU cores to use."""
    if os.getenv('NERSC_HOST') == 'cori':
        maxproc = 64
    elif os.getenv('NERSC_HOST') == 'edison':
        maxproc = 48
    else:
        import multiprocessing
        maxproc = multiprocessing.cpu_count()
        
    return maxproc // 2 # avoid hyper-threading

def read_sample():
    """Read the sample.

    """
    import legacyhalos.io
    from astrometry.util.fits import merge_tables

    cols = ('ra', 'dec', 'bx', 'by', 'brickname', 'objid', 'type',
            'shapeexp_r', 'shapeexp_e1', 'shapeexp_e2',
            'shapedev_r', 'shapedev_e1', 'shapedev_e2')
        
    sample = legacyhalos.io.read_catalog(extname='LSPHOT', upenn=True, columns=cols)
    rm = legacyhalos.io.read_catalog(extname='REDMAPPER', upenn=True,
                                     columns=('mem_match_id', 'z', 'r_lambda'))
    sample.add_columns_from(rm)

    sample = sample[0:2]
    # sample = sample[4:5] # timed out...
    #sample = sample[12:13] # OSError: File not found: '/global/cscratch1/sd/desiproc/dr5-new/images/decam/NonDECaLS-DR5/CP20130608/c4d_130608_234704_oow_r_a1.fits.fz'
    #sample = sample[13:14] # OSError: File not found: '/global/cscratch1/sd/desiproc/dr5-new/images/decam/NonDECaLS-DR5/CP20130910/c4d_130910_091527_oow_r_a1.fits.fz'
    #sample = sample[14:15] # OSError: File not found: '/global/cscratch1/sd/desiproc/dr5-new/images/decam/NonDECaLS-DR5/CP20130905/c4d_130905_031857_ooi_g_a1.fits.fz'
    #sample = sample[15:20]
    print('Read {} galaxies'.format(len(sample)))

    return sample

def init_survey(custom=False):
    """Instantiate the LegacySurveyData object."""
    from legacypipe.survey import LegacySurveyData

    if custom:
        cache_dir = None
    else:
        cache_dir = os.path.join('/project/projectdirs/cosmo/data/legacysurvey/dr5')
        #cache_dir = os.path.join('/global/cscratch1/sd/dstn/dr6plus')

    cache_dir = '/global/cscratch1/sd/dstn/dr5-new-sky'
    #cache_dir = None

    return LegacySurveyData(cache_dir=cache_dir)

def _missing(sample, size=1, filetype='coadds', clobber=False):
    """Find missing data of a given filetype."""
    
    from legacyhalos.io import get_objid

    if filetype == 'coadds':
        filesuffix = 'resid.jpg'
    elif filetype == 'ellipse':
        filesuffix = 'ellipse.fits'
    else:
        print('Unrecognized file type!')
        raise ValueError

    objid, objdir = get_objid(sample)

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)
    
    for ii, (objid1, objdir1) in enumerate( zip(objid, objdir) ):
        residfile = os.path.join(objdir1, '{}-{}'.format(objid1, filesuffix))
        if os.path.exists(residfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices[todo]

    return np.array_split(indices, size)

def missing_coadds(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have coadds.'''
    return _missing(sample, size=size, filetype='coadds',
                    clobber=clobber)

def missing_ellipse(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have ellipse fits.'''
    return _missing(sample, size=size, filetype='ellipse',
                    clobber=clobber)

def main():
    from contextlib import redirect_stdout
    from legacyhalos.io import get_objid
    from legacyhalos.util import get_logger

    parser = argparse.ArgumentParser()
    parser.add_argument('--ncpu', type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--pixscale', default=0.262, type=float, help='pixel scale (arcsec/pix).')
    parser.add_argument('--mpi', action='store_true', help='Use MPI parallelism')
    parser.add_argument('--coadds', action='store_true', help='Build the DR-based coadds')
    parser.add_argument('--custom-coadds', action='store_true', help='Build the custom coadds')
    parser.add_argument('--ellipse', action='store_true', help='Do the ellipse fitting')
    parser.add_argument('--debug', action='store_true', help='Build some debugging plots.')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose output.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')                                
    args = parser.parse_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    if args.ncpu is None:
        args.ncpu = get_ncpu()

    # Read the sample and initialize the LegacySurveyData() object.
    if rank == 0:
        sample = read_sample()
        survey = init_survey(custom=args.custom_coadds)
    else:
        sample = None
        survey = None

    if comm:
        sample = comm.bcast(sample, root=0)
        survey = comm.bcast(survey, root=0)

    # Determine how many more objects we need to analyze and divide them
    # across ranks.
    groups, suffix = [], ''
    if rank == 0:
        if args.coadds or args.custom_coadds:
            groups = missing_coadds(sample, size=size, clobber=args.clobber)
            suffix = 'coadds'
        elif args.ellipse:
            groups = missing_ellipse(sample, size=size, clobber=args.clobber)
            suffix = 'ellipse'
        else:
            groups = []

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if len(groups) == 0:
        print('No more galaxies to process by rank {}!'.format(rank))
        return

    if rank == 0:
        print('Analyzing {} galaxies with {} tasks/ranks at {}'.format(
            len(sample), size, time.asctime()))

    # Loop on the remaining objects.
    for ii in groups[rank]:
        objid, objdir = get_objid(sample[ii])

        logfile = os.path.join(objdir, '{}-{}.log'.format(objid, suffix))
        #print('Logging to {} '.format(logfile))

        t0 = time.time()
        if args.custom_coadds:
            from legacyhalos.coadds import legacyhalos_custom_coadds
            with open(logfile, 'w') as log:
                with redirect_stdout(log):
                    print('Rank {} started working on objid {} at {}'.format(
                        rank, objid, time.asctime()))
                    legacyhalos_custom_coadds(
                        sample[ii], survey=survey, objid=objid, objdir=objdir,
                        ncpu=args.ncpu, pixscale=args.pixscale, verbose=args.verbose)
                    print('Rank {} finished objid {} at {} in {:.3f} minutes.'.format(
                        rank, objid, time.asctime(), (time.time() - t0)/60))
                    
        if args.coadds:
            from legacyhalos.coadds import legacyhalos_custom_coadds
            print('Need to pass cache_dr to read the tractor catalogs from the DR5 release.')
            import pdb ; pdb.set_trace()
            with open(logfile, 'w') as log:
                with redirect_stdout(log):
                    print('Rank {} started working on objid {} at {}'.format(
                        rank, objid, time.asctime()))
                    legacyhalos_coadds(
                        sample[ii], survey=survey, objid=objid, objdir=objdir,
                        ncpu=args.ncpu, pixscale=args.pixscale, verbose=args.verbose)
                    print('Rank {} finished objid {} at {} in {:.3f} minutes.'.format(
                        rank, objid, time.asctime(), (time.time() - t0)/60))
                    
        if args.ellipse:
            from legacyhalos.ellipse import legacyhalos_ellipse
            from legacyhalos.util import get_logger, destroy_logger
            log = get_logger(logfile)
            log.info('Rank {} started working on objid {} at {}'.format(
                rank, objid, time.asctime()))
        
            legacyhalos.ellipse.legacyhalos_ellipse(
                sample[ii], objid=objid, objdir=objdir, ncpu=args.ncpu,
                pixscale=args.pixscale, debug=args.debug, verbose=args.verbose)
                    
            log.info('Rank {} finished objid {} after {:.1f} seconds'.format(
                rank, objid, time.time()-t0))
            destroy_logger(log)
            
            #log.warning('Rank {} FAILED on objid {}'.format(rank, objid))
            #import traceback
            #traceback.print_exc()

    if comm:
        comm.barrier()
        
    if rank == 0:
        print('Finished at {}'.format(time.asctime()))

if __name__ == '__main__':
    main()
