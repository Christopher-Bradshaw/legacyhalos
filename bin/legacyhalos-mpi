#!/usr/bin/env python

"""MPI wrapper for the various computationally intensive legacyhalos analysis
steps.



"""

from __future__ import absolute_import, division, print_function

import os, sys, time
import argparse
import numpy as np

from legacyhalos.util import get_logger

PIXSCALE = 0.262

def read_sample():
    """Read the sample.

    """
    import legacyhalos.io
    from astrometry.util.fits import merge_tables

    cols = ('ra', 'dec', 'bx', 'by', 'brickname', 'objid', 'type',
            'shapeexp_r', 'shapeexp_e1', 'shapeexp_e2',
            'shapedev_r', 'shapedev_e1', 'shapedev_e2')
        
    sample = legacyhalos.io.read_catalog(extname='LSPHOT', upenn=True, columns=cols)
    rm = legacyhalos.io.read_catalog(extname='REDMAPPER', upenn=True,
                                     columns=('mem_match_id', 'z', 'r_lambda'))
    sample.add_columns_from(rm)

    sample = sample[0:1]
    print('Read {} galaxies'.format(len(sample)))

    return sample

def init_survey():
    """Instantiate the LegacySurveyData object."""
    from legacypipe.survey import LegacySurveyData

    cache_dir = os.path.join(os.sep, 'global', 'cscratch1', 'sd', 'dstn', 'dr6plus')
    #cache_dir = os.path.join(os.sep, 'project', 'projectdirs', 'cosmo', 'data', 'legacysurvey', 'dr5')
    return LegacySurveyData(cache_dir=cache_dir)

def _destroy_logger(log):
    allhndl = list(log.handlers)
    for hndl in allhndl:
        log.removeHandler(hndl)
        hndl.flush()
        hndl.close()

def _missing(sample, size=1, filetype='coadds', clobber=False):
    """Find missing data of a given filetype."""
    
    from legacyhalos.io import get_objid

    if filetype == 'coadds':
        filesuffix = 'resid.jpg'
    elif filetype == 'ellipse':
        filesuffix = 'ellipse.fits'
    else:
        print('Unrecognized file type!')
        raise ValueError

    objid, objdir = get_objid(sample)

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)
    
    for ii, (objid1, objdir1) in enumerate( zip(objid, objdir) ):
        residfile = os.path.join(objdir1, '{}-{}'.format(objid1, filesuffix))
        if os.path.exists(residfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices[todo]

    return np.array_split(indices, size)

def missing_coadds(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have coadds.'''
    return _missing(sample, size=size, filetype='coadds',
                    clobber=clobber)

def missing_ellipse(sample, size=1, clobber=False):
    '''Find the galaxies that do not yet have ellipse fits.'''
    return _missing(sample, size=size, filetype='ellipse',
                    clobber=clobber)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--ncpu', type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--mpi', action='store_true', help='Use MPI parallelism')
    parser.add_argument('--coadds', action='store_true', help='Build the coadds')
    parser.add_argument('--custom-coadds', action='store_true', help='Build the custom coadds')
    parser.add_argument('--ellipse', action='store_true', help='Do the ellipse fitting')
    parser.add_argument('--debug', action='store_true', help='Build some debugging plots.')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose output.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')                                
    args = parser.parse_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank = 0

    if os.getenv('NERSC_HOST') == 'cori':
        maxproc = 64
    elif os.getenv('NERSC_HOST') == 'edison':
        maxproc = 48
    else:
        maxproc = 4

    if args.ncpu is None:
        args.ncpu = maxproc // 2 # avoid hyper-threading

    # Read the sample and initialize the LegacySurveyData() object.
    if rank == 0:
        sample = read_sample()
        survey = init_survey()
    else:
        sample = None
        survey = None

    if comm:
        #args = comm.bcast(args, root=0)
        sample = comm.bcast(sample, root=0)
        survey = comm.bcast(survey, root=0)

    if args.coadds: # Build the coadds
        legacyhalos_coadds(sample, survey=survey, comm=comm, custom=args.custom_coadds,
                           ncpu=args.ncpu, verbose=args.verbose, clobber=args.clobber)

    if args.ellipse: # Do ellipse fitting
        legacyhalos_ellipse(sample, survey=survey, comm=comm, ncpu=args.ncpu,
                            verbose=args.verbose, debug=args.debug, clobber=args.clobber)

def legacyhalos_coadds(sample, survey=None, comm=None, custom=False, ncpu=1, 
                       verbose=False, clobber=False):
    """Generate the coadds.

    """
    import legacyhalos.coadds
    from legacyhalos.io import get_objid

    print('Starting at {}'.format(time.asctime()))
    
    if comm:
        rank, size = comm.rank, comm.size
    else:
        rank, size = 0, 1

    # Determine how many more coadds we need to make and chunk them.
    t0 = time.time()
    if rank == 0:
        groups = missing_coadds(sample, size=size, clobber=clobber)
    else:
        groups = []

    if comm:
        groups = comm.bcast(groups, root=0)

    if len(groups) == 0:
        print('No more galaxies to process by rank {}!'.format(rank))
        return

    #if len(groups) == 0: # All done!
    #    print('All done at {}'.format(time.asctime()))
    #    return 

    # Loop on the remaining objects.
    for ii in groups[rank]:
        objid, objdir = get_objid(sample[ii])

        logfile = os.path.join(objdir, '{}-coadds.log'.format(objid))
        print('Logging rank {} to {}'.format(rank, logfile))

        log = get_logger(logfile)
        log.info('Rank {} started working on objid {} at {}'.format(rank, objid, time.asctime()))

        try:
            t0 = time.time()
            if custom:
                legacyhalos.coadds.legacyhalos_custom_coadds(sample[ii], survey=survey,
                                                             objid=objid, objdir=objdir,
                                                             ncpu=ncpu, pixscale=PIXSCALE,
                                                             verbose=verbose)
            else:
                legacyhalos.coadds.legacyhalos_coadds(sample[ii], survey=survey,
                                                      objid=objid, objdir=objdir,
                                                      ncpu=ncpu, pixscale=PIXSCALE,
                                                      verbose=verbose)
            log.info('Rank {} finished objid {} after {:.1f} seconds'.format(
                rank, objid, time.time()-t0))
        except:
            log.warning('Rank {} FAILED on objid {}'.format(rank, objid))
            import traceback
            traceback.print_exc()

        _destroy_logger(log)

    print('All done at {}'.format(time.asctime()))

def legacyhalos_ellipse(sample, ncpu=1, comm=None, verbose=False,
                        debug=False, clobber=False):
    """Do ellipse-fitting.

    """
    import fitsio
    from legacyhalos.io import get_objid
    import legacyhalos.ellipse

    if comm is None:
        rank, size = 0, 1
    else:
        rank, size = comm.rank, comm.size

    # Determine how many more ellipse fits we need to make and chunk them.
    t0 = time.time()
    if rank == 0:
        print('Starting at {}'.format(time.asctime()))

    groups = missing_ellipse(sample, comm=comm, clobber=clobber)
    if len(groups) == 0:
        return

    #sys.stdout.flush()
    #if comm is not None:
    #    indices = comm.bcast(indices, root=0)

    # Initialize and then broadcast the LegacySurveyData() object to all ranks.
    if rank == 0:
        survey = init_survey()
        
    if comm is not None:
        groups = comm.bcast(groups, root=0)
        sample = comm.bcast(sample, root=0)

    # Loop on the remaining objects.
    for ii in groups[rank]:

        objid, objdir = get_objid(sample[ii])

        logfile = os.path.join(objdir, '{}-ellipse.log'.format(objid))
        print('Logging to {}'.format(logfile))

        print('Rank {} objid {} {}'.format(rank, objid, time.asctime()))
        sys.stdout.flush()

        try:
            t0 = time.time()
            with open(logfile, 'a') as log:
                #sys.stdout = log
                #sys.stderr = log
                err = legacyhalos.ellipse.legacyhalos_ellipse(sample[ii], objid=objid,
                                                              objdir=objdir, ncpu=ncpu,
                                                              pixscale=PIXSCALE, debug=debug,
                                                              verbose=verbose)
                
            runtime = (time.time()-t0) / 60
            print('SUCCESS: objid {} on rank {} took {:.1f} minutes'.format(objid, rank, runtime))

        except:
            print('FAILED: objid {} on rank {} raised an exception'.format(objid, rank))
            import traceback
            traceback.print_exc()

        log.info('All done at {}'.format(time.asctime()))
        
if __name__ == '__main__':
    main()
