#!/usr/bin/env python
"""MPI wrapper for the legacyhalos profiles sample.

"""
import matplotlib
matplotlib.use('Agg')

import os, time, pdb
import numpy as np

def main():
    """Top-level wrapper.

    """
    from astropy.table import Table, hstack
    import legacyhalos.io
    import legacyhalos.mpi
    import legacyhalos.html

    from legacypipe.survey import LegacySurveyData
    from legacyhalos.misc import RADIUS_CLUSTER_KPC, ZCOLUMN

    from legacyhalos.mpi import (call_pipeline_coadds, call_custom_coadds, call_ellipse,
                                 call_sersic, call_sky, call_htmlplots)

    args = legacyhalos.mpi.mpi_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    if rank == 0:
        sample = legacyhalos.io.read_profiles_sample(first=args.first, last=args.last,
                                                     verbose=args.verbose)
    else:
        sample = None

    if comm:
        sample = comm.bcast(sample, root=0)

    if args.coadds and not args.count:
        kdccds_north, kdccds_south = legacyhalos.io.read_all_ccds()

    # Building the web-page and integrating the ellipse-fitting results work on
    # the full sample, so do that here and then return.
    if args.htmlindex:
        if rank == 0:
            intflux = legacyhalos.io.read_integrated_flux(first=args.first, last=args.last,
                                                          verbose=args.verbose)
            
            legacyhalos.html.make_html(sample, intflux=intflux, survey=None, pixscale=args.pixscale,
                                       zcolumn=ZCOLUMN, nproc=args.nproc, clobber=args.clobber,
                                       makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                                       ccdqa=args.ccdqa)
        return

    if args.integrate:
        if rank == 0:
            results = legacyhalos.integrate.legacyhalos_integrate(
                sample, nproc=args.nproc, verbose=args.verbose, clobber=args.clobber)            
        return

    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    groups, suffix = [], ''
    if rank == 0:
        suffix, groups = legacyhalos.io.missing_files_groups(args, sample, size, args.htmldir)

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))
        
    if rank == 0:
        if ntodo == 0:
            print('{} for all {} galaxies are complete!'.format(
                suffix.upper(), len(sample)), flush=True)
            return
        else:
            print('{} left to do: {} / {} divided across {} group(s) and {} rank(s).'.format(
                suffix.upper(), ntodo, len(sample), len(groups), size), flush=True)

    if len(groups[rank]) == 0 or args.count:
        if len(groups[rank]) > 0 and args.debug:
            galaxy, galaxydir = legacyhalos.io.get_galaxy_galaxydir(sample[tuple(groups)], htmldir=args.htmldir)
            for ii, dd in zip(groups[rank], galaxydir):
                print('  {} {}'.format(ii, dd))
            #[print('  {}'.format(dd)) for dd in np.atleast_1d(galaxydir)]
        return

    # Loop on the remaining objects.
    print('Starting {} {} on rank {} at {}'.format(len(groups[rank]), suffix.upper(),
                                                   rank, time.asctime()), flush=True)
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = legacyhalos.io.get_galaxy_galaxydir(onegal, htmldir=args.htmldir)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
            #print('Logging to {} '.format(logfile), flush=True)
        
        # Need the cluster "radius" to build the coadds.
        if args.coadds or args.custom_coadds or args.sky or args.htmlplots:
            radius_mosaic_arcsec = legacyhalos.misc.cutout_radius_kpc(
                redshift=onegal[ZCOLUMN], radius_kpc=RADIUS_CLUSTER_KPC) # [arcsec]

            survey = LegacySurveyData()
            survey.output_dir = galaxydir

        if args.coadds:
            if args.sdss:
                pass
                #err = legacyhalos.sdss.download(sample, pixscale=args.sdss_pixscale, clobber=args.clobber)
                #pdb.set_trace()
            else:
                call_pipeline_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                      kdccds_north, kdccds_south, pixscale=args.pixscale,
                                      nproc=args.nproc, force=args.force, debug=args.debug,
                                      logfile=logfile)
                    
        if args.custom_coadds or args.htmlplots:
            if not legacyhalos.io.check_and_read_ccds(galaxy, survey, debug=args.debug, logfile=logfile):
                continue

        if args.custom_coadds:
            call_custom_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                pixscale=args.pixscale, nproc=args.nproc, debug=args.debug,
                                logfile=logfile, sdss=args.sdss, sdss_pixscale=args.sdss_pixscale)
                    
        if args.ellipse:
            call_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir, pixscale=args.pixscale,
                         nproc=args.nproc, verbose=args.verbose, debug=args.debug,
                         logfile=logfile, zcolumn=ZCOLUMN)
                        
        if args.sersic:
            call_sersic(onegal, galaxy, galaxydir, args.seed, args.verbose,
                         args.debug, logfile)
            
        if args.sky:
            call_sky(onegal, galaxy, galaxydir, survey, args.seed, args.nproc,
                      args.pixscale, args.verbose, args.debug, logfile)

        if args.htmlplots:
            call_htmlplots(Table(onegal), galaxy, survey, args.pixscale, args.nproc,
                           args.debug, args.clobber, args.verbose, args.ccdqa, logfile,
                           ZCOLUMN, args.htmldir)

    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups = legacyhalos.io.missing_files_groups(args, sample, size, args.htmldir)
        if len(groups) > 0:
            stilltodo = len(np.hstack(np.atleast_1d(groups)))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
