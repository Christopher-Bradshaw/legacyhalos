#!/usr/bin/env python
"""MPI wrapper for the various computationally intensive legacyhalos analysis. 

ls hsc-data/8/*/*/* | grep -v ccddata | tar -cvf hsc-legacysurveys.tar.gz -T -

"""
import matplotlib
matplotlib.use('Agg')

import os, sys, time, pdb
import argparse
import numpy as np
from astropy.table import Table, hstack
from contextlib import redirect_stdout, redirect_stderr

from astrometry.util.fits import fits_table, merge_tables
from legacypipe.survey import LegacySurveyData

import legacyhalos.io
import legacyhalos.hsc
import legacyhalos.coadds
import legacyhalos.html
import legacyhalos.integrate
import legacyhalos.sdss

from legacyhalos.misc import RADIUS_CLUSTER_KPC, HSC_RADIUS_CLUSTER_KPC

def read_all_ccds(dr='dr8'):
    """Read the CCDs files, treating DECaLS and BASS+MzLS separately.

    """
    from astrometry.libkd.spherematch import tree_open
    #survey = LegacySurveyData()

    drdir = os.path.join(legacyhalos.io.sample_dir(), dr)

    kdccds_north = []
    for camera in ('90prime', 'mosaic'):
        ccdsfile = os.path.join(drdir, 'survey-ccds-{}-{}.kd.fits'.format(camera, dr))
        ccds = tree_open(ccdsfile, 'ccds')
        print('Read {} CCDs from {}'.format(ccds.n, ccdsfile))
        kdccds_north.append((ccdsfile, ccds))

    ccdsfile = os.path.join(drdir, 'survey-ccds-decam-{}.kd.fits'.format(dr))
    ccds = tree_open(ccdsfile, 'ccds')
    print('Read {} CCDs from {}'.format(ccds.n, ccdsfile))
    kdccds_south = (ccdsfile, ccds)

    return kdccds_north, kdccds_south

def get_run(onegal, radius_mosaic, pixscale, kdccds_north, kdccds_south, log=None):
    """Determine the "run", i.e., determine whether we should use the BASS+MzLS CCDs
    or the DECaLS CCDs file when running the pipeline.

    """
    from astrometry.util.util import Tan
    from astrometry.libkd.spherematch import tree_search_radec
    from legacypipe.survey import ccds_touching_wcs
    
    ra, dec = onegal['RA'], onegal['DEC']
    if dec < 25:
        run = 'decam'
    elif dec > 40:
        run = '90prime-mosaic'
    else:
        width = legacyhalos.coadds._mosaic_width(radius_mosaic, pixscale)
        wcs = Tan(ra, dec, width/2+0.5, width/2+0.5,
                  -pixscale/3600.0, 0.0, 0.0, pixscale/3600.0, 
                  float(width), float(width))

        # BASS+MzLS
        TT = []
        for fn, kd in kdccds_north:
            I = tree_search_radec(kd, ra, dec, 1.0)
            if len(I) == 0:
                continue
            TT.append(fits_table(fn, rows=I))
        if len(TT) == 0:
            inorth = []
        else:
            ccds = merge_tables(TT, columns='fillzero')
            inorth = ccds_touching_wcs(wcs, ccds)
        
        # DECaLS
        fn, kd = kdccds_south
        I = tree_search_radec(kd, ra, dec, 1.0)
        if len(I) > 0:
            ccds = fits_table(fn, rows=I)
            isouth = ccds_touching_wcs(wcs, ccds)
        else:
            isouth = []

        if len(inorth) > len(isouth):
            run = '90prime-mosaic'
        else:
            run = 'decam'
        print('Cluster RA, Dec={:.6f}, {:.6f}: run={} ({} north CCDs, {} south CCDs).'.format(
            ra, dec, run, len(inorth), len(isouth)), flush=True, file=log)

    return run

def check_and_read_ccds(galaxy, survey, debug=False, logfile=None):
    """Read the CCDs file generated by the pipeline coadds step.

    """
    ccdsfile = os.path.join(survey.output_dir, '{}-ccds.fits'.format(galaxy))
    if not os.path.isfile(ccdsfile):
        if debug:
            print('CCDs file {} not found.'.format(ccdsfile), flush=True)
            print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
        else:
            with open(logfile, 'w') as log:
                print('CCDs file {} not found.'.format(ccdsfile), flush=True, file=log)
                print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
        return False
    survey.ccds = survey.cleanup_ccds_table(fits_table(ccdsfile))

    # Check that coadds in all three grz bandpasses were generated in the
    # previous step.
    if ('g' not in survey.ccds.filter) or ('r' not in survey.ccds.filter) or ('z' not in survey.ccds.filter):
        if debug:
            print('Missing grz coadds...skipping.', flush=True)
            print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
        else:
            with open(logfile, 'w') as log:
                print('Missing grz coadds...skipping.', flush=True, file=log)
                print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
        return False
    return True

def get_survey_dir(onegal):
    #if onegal['RELEASE'] == 6000:
    #    return '/global/project/projectdirs/cosmo/work/legacysurvey/dr6'
    #elif onegal['RELEASE'] == 7000 or onegal['RELEASE'] == 7001:
    #    return '/global/project/projectdirs/cosmo/work/legacysurvey/dr7'
    #else:
    #    print('Unrecognized DR!')
    #    raise ValueError
    #return
    return '/global/project/projectdirs/cosmo/work/legacysurvey/dr8'

def missing_files(sample, filetype='coadds', size=1, htmldir=None,
                  hsc=False, sdss=False, clobber=False):
    """Find missing data of a given filetype."""    

    if filetype == 'coadds':
        filesuffix = '-pipeline-resid-grz.jpg'
    elif filetype == 'custom-coadds':
        filesuffix = '-custom-resid-grz.jpg'
    elif filetype == 'ellipse':
        filesuffix = '-ellipsefit.p'
    elif filetype == 'sersic':
        filesuffix = '-sersic-single.p'
    elif filetype == 'html':
        filesuffix = '-ccdpos.png'
        #filesuffix = '-sersic-exponential-nowavepower.png'
    elif filetype == 'sdss-coadds':
        filesuffix = '-sdss-image-gri.jpg'
    elif filetype == 'sdss-custom-coadds':
        filesuffix = '-sdss-resid-gri.jpg'
    elif filetype == 'sdss-ellipse':
        filesuffix = '-sdss-ellipsefit.p'
    else:
        print('Unrecognized file type!')
        raise ValueError

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)

    if filetype == 'html':
        if hsc:
            galaxy, _, galaxydir = legacyhalos.hsc.get_galaxy_galaxydir(sample, htmldir=htmldir, html=True)
        else:
            galaxy, _, galaxydir = legacyhalos.io.get_galaxy_galaxydir(sample, htmldir=htmldir, html=True)
    else:
        if hsc:
            galaxy, galaxydir = legacyhalos.hsc.get_galaxy_galaxydir(sample, htmldir=htmldir)
        else:
            galaxy, galaxydir = legacyhalos.io.get_galaxy_galaxydir(sample, htmldir=htmldir)

    for ii, (gal, gdir) in enumerate( zip(np.atleast_1d(galaxy), np.atleast_1d(galaxydir)) ):
        checkfile = os.path.join(gdir, '{}{}'.format(gal, filesuffix))
        if os.path.exists(checkfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices = indices[todo]
        
    return np.array_split(indices, size)

def _missing_files(args, sample, size, htmldir=None):
    """Simple task-specific wrapper on missing_files.

    """
    if args.coadds:
        if args.sdss:
            suffix = 'sdss-coadds'
        else:
            suffix = 'coadds'
    elif args.custom_coadds:
        if args.sdss:
            suffix = 'sdss-custom-coadds'
        else:
            suffix = 'custom-coadds'
    elif args.ellipse:
        if args.sdss:
            suffix = 'sdss-ellipse'
        else:
            suffix = 'ellipse'
    elif args.sersic:
        suffix = 'sersic'
    elif args.sky:
        suffix = 'sky'
    elif args.htmlplots:
        suffix = 'html'
    else:
        suffix = ''        

    if suffix != '':
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc,
                               sdss=args.sdss, clobber=args.clobber, htmldir=htmldir)
    else:
        groups = []        

    return suffix, groups

def _start(galaxy, log=None, seed=None):
    if seed:
        print('Random seed = {}'.format(seed), flush=True)        
    print('Started working on galaxy {} at {}'.format(
        galaxy, time.asctime()), flush=True, file=log)

def _done(galaxy, err, t0, log=None):
    if err == 0:
        print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
    print('Finished galaxy {} in {:.3f} minutes.'.format(
          galaxy, (time.time() - t0)/60), flush=True, file=log)

def _call_pipeline_coadds(onegal, galaxy, radius_mosaic, survey, kdccds_north,
                          kdccds_south, pixscale, nproc, force, debug, hsc,
                          logfile):
    """Wrapper script to build the pipeline coadds.

    radius_mosaic in arcsec

    """
    cleanup = True

    t0 = time.time()
    if debug:
        _start(galaxy)
        if hsc:
            run = 'decam'
        else:
            run = get_run(onegal, radius_mosaic, pixscale, kdccds_north, kdccds_south)
        err = legacyhalos.coadds.pipeline_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                 survey=survey, pixscale=pixscale, run=run,
                                                 nproc=nproc, force=force, cleanup=cleanup)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log)
                if hsc:
                    run = 'decam'
                else:
                    run = get_run(onegal, radius_mosaic, pixscale, kdccds_north, kdccds_south, log=log)
                err = legacyhalos.coadds.pipeline_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                         survey=survey, pixscale=pixscale, run=run,
                                                         nproc=nproc, force=force, log=log, cleanup=cleanup)
                _done(galaxy, err, t0, log=log)

def _call_custom_coadds(onegal, galaxy, radius_mosaic, survey, pixscale,
                        nproc, debug, logfile, sdss, sdss_pixscale):
    """Wrapper script to build the pipeline coadds."""
    t0 = time.time()
    if debug:
        _start(galaxy)
        if sdss:
            err = legacyhalos.sdss.custom_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                 survey=survey, pixscale=sdss_pixscale, nproc=nproc)
        else:
            err = legacyhalos.coadds.custom_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                   survey=survey, pixscale=pixscale, nproc=nproc)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log)
                if sdss:
                    err = legacyhalos.sdss.custom_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                         survey=survey, pixscale=sdss_pixscale,
                                                         nproc=nproc, log=log)
                else:
                    err = legacyhalos.coadds.custom_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                           survey=survey, pixscale=pixscale,
                                                           nproc=nproc, log=log)
                _done(galaxy, err, t0, log=log)
                
def _call_ellipse(onegal, galaxy, pixscale=0.262, nproc=1, verbose=False,
                  debug=False, logfile=None, hsc=False, input_ellipse=False,
                  sdss=False, sdss_pixscale=0.396):
    """Wrapper script to do ellipse-fitting.

    """
    import legacyhalos.ellipse

    if hsc:
        zcolumn = 'Z_BEST'
    else:
        zcolumn = 'Z_LAMBDA'

    t0 = time.time()
    if debug:
        _start(galaxy)
        err = legacyhalos.ellipse.legacyhalos_ellipse(onegal, pixscale=pixscale, nproc=nproc,
                                                      zcolumn=zcolumn,
                                                      input_ellipse=input_ellipse,
                                                      verbose=verbose, debug=debug,
                                                      noellipsefit=True, hsc=hsc,
                                                      sdss=sdss, sdss_pixscale=sdss_pixscale)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log)
                err = legacyhalos.ellipse.legacyhalos_ellipse(onegal, pixscale=pixscale, nproc=nproc,
                                                              zcolumn=zcolumn,
                                                              input_ellipse=input_ellipse,
                                                              verbose=verbose, debug=debug,
                                                              noellipsefit=True, hsc=hsc,
                                                              sdss=sdss, sdss_pixscale=sdss_pixscale)
                _done(galaxy, err, t0, log=log)

def _call_sersic(onegal, galaxy, galaxydir, seed, verbose, debug, logfile, hsc):
    """Wrapper script to do Sersic-fitting.

    """
    import legacyhalos.sersic

    t0 = time.time()
    if debug:
        _start(galaxy, seed=seed)
        err = legacyhalos.sersic.legacyhalos_sersic(onegal, galaxy=galaxy, galaxydir=galaxydir,
                                                    debug=debug, verbose=verbose, seed=seed)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log, seed=seed)
                err = legacyhalos.sersic.legacyhalos_sersic(onegal, galaxy=galaxy, galaxydir=galaxydir,
                                                            debug=debug, verbose=verbose, seed=seed)
                _done(galaxy, err, t0, log=log)

def _call_sky(onegal, galaxy, galaxydir, survey, seed, nproc, pixscale,
              verbose, debug, logfile):
    """Wrapper script to do Sersic-fitting.

    """
    import legacyhalos.sky

    t0 = time.time()
    if debug:
        _start(galaxy, seed=seed)
        err = legacyhalos.sky.legacyhalos_sky(onegal, survey=survey, galaxy=galaxy, galaxydir=galaxydir,
                                              nproc=nproc, pixscale=pixscale, seed=seed,
                                              debug=debug, verbose=verbose, force=force)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log, seed=seed)
                err = legacyhalos.sky.legacyhalos_sky(onegal, survey=survey, galaxy=galaxy, galaxydir=galaxydir,
                                                      nproc=nproc, pixscale=pixscale, seed=seed,
                                                      debug=debug, verbose=verbose, force=force)
                _done(galaxy, err, t0, log=log)
                
def _call_htmlplots(onegal, galaxy, survey, pixscale, nproc, debug, clobber,
                    verbose, ccdqa, logfile, hsc, htmldir):
    """Wrapper script to build the pipeline coadds."""
    t0 = time.time()

    if debug:
        _start(galaxy)
        err = legacyhalos.html.make_plots(onegal, datadir=None, htmldir=htmldir,
                                          pixscale=pixscale, survey=survey, clobber=clobber,
                                          verbose=verbose, nproc=nproc,
                                          ccdqa=ccdqa, maketrends=False, hsc=hsc)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log)
                err = legacyhalos.html.make_plots(onegal, datadir=None, htmldir=htmldir,
                                                  pixscale=pixscale, survey=survey, clobber=clobber,
                                                  verbose=verbose, nproc=nproc,
                                                  ccdqa=ccdqa, maketrends=False, hsc=hsc)
                _done(galaxy, err, t0, log=log)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--nproc', default=1, type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--mpi', action='store_true', help='Use MPI parallelism')

    parser.add_argument('--hsc', action='store_true', help='Analyze the HSC massive-galaxy sample.')
    parser.add_argument('--sdss', action='store_true', help='Analyze the SDSS galaxies.')

    parser.add_argument('--first', type=int, help='Index of first object to process.')
    parser.add_argument('--last', type=int, help='Index of last object to process.')
    parser.add_argument('--seed', type=int, default=1, help='Random seed (used with --sky and --sersic).')

    parser.add_argument('--coadds', action='store_true', help='Build the pipeline coadds.')
    parser.add_argument('--custom-coadds', action='store_true', help='Build the custom coadds.')
    parser.add_argument('--ellipse', action='store_true', help='Do the ellipse fitting.')
    parser.add_argument('--sersic', action='store_true', help='Perform Sersic fitting.')
    parser.add_argument('--integrate', action='store_true', help='Integrate the surface brightness profiles.')
    parser.add_argument('--sky', action='store_true', help='Estimate the sky variance.')
    parser.add_argument('--htmlplots', action='store_true', help='Build the HTML output.')
    parser.add_argument('--htmlindex', action='store_true', help='Build HTML index.html page.')

    parser.add_argument('--htmldir', type=str, help='Output directory for HTML files.')
    
    parser.add_argument('--pixscale', default=0.262, type=float, help='pixel scale (arcsec/pix).')
    parser.add_argument('--sdss-pixscale', default=0.396, type=float, help='SDSS pixel scale (arcsec/pix).')
    
    parser.add_argument('--ccdqa', action='store_true', help='Build the CCD-level diagnostics.')
    parser.add_argument('--force', action='store_true', help='Use with --coadds; ignore previous pickle files.')
    parser.add_argument('--count', action='store_true', help='Count how many objects are left to analyze and then return.')
    parser.add_argument('--nomakeplots', action='store_true', help='Do not remake the QA plots for the HTML pages.')

    parser.add_argument('--debug', action='store_true', help='Log to STDOUT and build debugging plots.')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose output.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')                                
    args = parser.parse_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    if rank == 0:
        if args.hsc:
            sample = legacyhalos.hsc.read_parent(first=args.first, last=args.last)
        else:
            sample = legacyhalos.io.read_profiles_sample(first=args.first, last=args.last)
            sample = sample[(sample['DEC'] > 25) * (sample['DEC'] < 40)]
            #sample = sample[[61, 74, 84]]
            #sample = sample[[8, 11, 136, 156, 157, 188, 214, 390, 603, 670, 871, 940]]
        if args.coadds and not args.count:
            kdccds_north, kdccds_south = read_all_ccds()
        else:
            kdccds_north, kdccds_south = None, None
    else:
        sample, kdccds_north, kdccds_south = None, None, None

    if comm:
        sample = comm.bcast(sample, root=0)
        kdccds_north = comm.bcast(kdccds_north, root=0)
        kdccds_south = comm.bcast(kdccds_south, root=0)

    # Build the web-page; integrate the ellipse-fitting results.
    if args.htmlindex:
        if rank == 0:
            if args.hsc:
                legacyhalos.hsc.make_html(sample, survey=None, pixscale=args.pixscale, zcolumn='Z_BEST',
                                          nproc=args.nproc, clobber=args.clobber, makeplots=False,
                                          verbose=args.verbose, htmldir=args.htmldir, ccdqa=args.ccdqa)
            else:
                legacyhalos.html.make_html(sample, survey=None, pixscale=args.pixscale, zcolumn='Z_LAMBDA',
                                           nproc=args.nproc, clobber=args.clobber, makeplots=False,
                                           verbose=args.verbose, htmldir=args.htmldir, ccdqa=args.ccdqa)
        return

    if args.integrate:
        if rank == 0:
            if args.hsc:
                outfile = os.path.join(legacyhalos.hsc.hsc_dir(), 'profiles1d-flux.fits')
            else:
                # Temporary paper2 hack--
                outfile = os.path.join(legacyhalos.io.paper2_dir(data=True), 'paper2-profiles1d-flux.fits')
                
            if os.path.exists(outfile) and args.clobber is False:
                print('Output file {} exists; use --clobber.'.format(outfile))
                return
            
            results = legacyhalos.integrate.legacyhalos_integrate(
                sample, nproc=args.nproc, verbose=args.verbose, hsc=args.hsc)
            if args.hsc:
                cols = ['OBJECT_ID', 'RA', 'DEC', 'Z_SPEC']
            else:
                cols = ['MEM_MATCH_ID', 'RA', 'DEC', 'Z_LAMBDA', 'LAMBDA_CHISQ', 'ID_CENT',
                        'MW_TRANSMISSION_G', 'MW_TRANSMISSION_R', 'MW_TRANSMISSION_Z']
            out = hstack((sample[cols], results))
            print('Writing {}'.format(outfile))
            out.write(outfile, overwrite=True)
        return

    # Determine how many more objects we need to analyze and divide them
    # across ranks.
    groups, suffix = [], ''
    if rank == 0:
        suffix, groups = _missing_files(args, sample, size, args.htmldir)

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))
        
    if rank == 0:
        if ntodo == 0:
            print('{} for all {} galaxies are complete!'.format(
                suffix.upper(), len(sample)), flush=True)
            return
        else:
            print('{} left to do: {} / {} divided across {} group(s) and {} rank(s).'.format(
                suffix.upper(), ntodo, len(sample), len(groups), size), flush=True)

    if len(groups[rank]) == 0 or args.count:
        if len(groups[rank]) > 0 and args.debug:
            if args.hsc:
                galaxy, galaxydir = legacyhalos.hsc.get_galaxy_galaxydir(sample[groups], htmldir=args.htmldir)
            else:
                galaxy, galaxydir = legacyhalos.io.get_galaxy_galaxydir(sample[groups], htmldir=args.htmldir)
            for ii, dd in zip(groups[rank], galaxydir):
                print('  {} {}'.format(ii, dd))
            #[print('  {}'.format(dd)) for dd in np.atleast_1d(galaxydir)]
        return

    # Loop on the remaining objects.
    print('Starting {} {} on rank {} at {}'.format(len(groups[rank]), suffix.upper(),
                                                   rank, time.asctime()), flush=True)
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        if args.hsc:
            galaxy, galaxydir = legacyhalos.hsc.get_galaxy_galaxydir(onegal, htmldir=args.htmldir)
        else:
            galaxy, galaxydir = legacyhalos.io.get_galaxy_galaxydir(onegal, htmldir=args.htmldir)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
            #print('Logging to {} '.format(logfile), flush=True)
        
        # Need the cluster "radius" to build the coadds.
        if args.coadds or args.custom_coadds or args.sky or args.htmlplots:
            if args.hsc:
                radius_mosaic_arcsec = legacyhalos.misc.cutout_radius_kpc(
                    redshift=onegal['Z_BEST'], radius_kpc=HSC_RADIUS_CLUSTER_KPC) # [arcsec]
            else:
                radius_mosaic_arcsec = legacyhalos.misc.cutout_radius_kpc(
                    redshift=onegal['Z_LAMBDA'], radius_kpc=RADIUS_CLUSTER_KPC) # [arcsec]

            survey = LegacySurveyData()
            survey.survey_dir = get_survey_dir(onegal)
            survey.output_dir = galaxydir

        if args.coadds:
            if args.sdss:
                err = legacyhalos.sdss.download(sample, pixscale=args.sdss_pixscale, clobber=args.clobber)
                pdb.set_trace()
            else:
                _call_pipeline_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                      kdccds_north, kdccds_south, args.pixscale,
                                      args.nproc, args.force, args.debug, args.hsc,
                                      logfile)
                    
        if args.custom_coadds or args.htmlplots:
            if not check_and_read_ccds(galaxy, survey, debug=args.debug, logfile=logfile):
                continue

        if args.custom_coadds:
            _call_custom_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                args.pixscale, args.nproc, args.debug, logfile,
                                args.sdss, args.sdss_pixscale)
                    
        if args.ellipse:
            if args.hsc:
                input_ellipse = {'eps': onegal['MEAN_E'], 'pa': onegal['MEAN_PA']}
            else:
                input_ellipse = None
            _call_ellipse(onegal, galaxy, pixscale=args.pixscale, nproc=args.nproc,
                          verbose=args.verbose, debug=args.debug, logfile=logfile,
                          hsc=args.hsc, input_ellipse=input_ellipse)
                        
        if args.sersic:
            _call_sersic(onegal, galaxy, galaxydir, args.seed, args.verbose,
                         args.debug, logfile, args.hsc)
            
        if args.sky:
            _call_sky(onegal, galaxy, galaxydir, survey, args.seed, args.nproc,
                      args.pixscale, args.verbose, args.debug, logfile)

        if args.htmlplots:
            _call_htmlplots(Table(onegal), galaxy, survey, args.pixscale, args.nproc,
                            args.debug, args.clobber, args.verbose, args.ccdqa, logfile,
                            args.hsc, args.htmldir)

    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        groups = missing_files(sample, filetype=suffix, size=size, hsc=args.hsc, clobber=args.clobber)
        if len(groups) > 0:
            stilltodo = len(np.hstack(np.atleast_1d(groups)))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
