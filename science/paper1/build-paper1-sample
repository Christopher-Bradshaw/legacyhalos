#!/usr/bin/env python

"""Generate the sample for Paper 1.

build-paper1-sample --clobber

"""
import os, argparse
import numpy as np

import fitsio
from astropy.table import Table

import legacyhalos.io
import legacyhalos.misc
from legacyhalos.redmapper import pzutils

sampledir = legacyhalos.io.sample_dir()
paper1dir = os.path.join( legacyhalos.io.paper1_dir(), 'data' )

def write_mstarcat(prefix, dr, rows):
    """Read and write out the mstar catalogs for a given prefix.

    """
    for sfhgrid in np.atleast_1d( (1, 2) ):
        for phot in ('lsphot-{}'.format(dr), 'sdssphot-dr14'):
            samplefile = os.path.join(sampledir, '{}-sfhgrid{:02d}-{}.fits'.format(prefix, sfhgrid, phot))
            outfile = os.path.join(paper1dir, 'paper1-{}-sfhgrid{:02d}-{}.fits'.format(prefix, sfhgrid, phot))

            mstar = fitsio.read(samplefile, rows=rows, ext=1)
            kcorr = fitsio.read(samplefile, rows=rows, ext=2)

            print('Writing {}'.format(outfile))
            fitsio.write(outfile, mstar, extname='ISEDFIT', clobber=True)
            fitsio.write(outfile, kcorr, extname='KCORR')

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--dr', type=str, default='dr6-dr7', help='Data release to analyze.')

    args = parser.parse_args()

    # Centrals--
    prefix = 'centrals'
    samplefile = os.path.join(sampledir, 'legacyhalos-{}-{}.fits'.format(prefix, args.dr))
    outfile = os.path.join(paper1dir, 'paper1-{}-{}.fits'.format(prefix, args.dr))

    allcen = fitsio.read(samplefile, ext=1)
    ngal = len(allcen)

    lam, lam_err = allcen['LAMBDA_CHISQ'], allcen['LAMBDA_CHISQ_E'] # descale??

    # Keep galaxies that have a non-zero probability (in detail, a probability
    # >1%) of being in any of our nominal redshift or richness bins.
    zbins = legacyhalos.misc.get_zbins()
    zmin, zmax = zbins[:-1], zbins[1:]
    nz = len(zmin)

    p_zbin = np.zeros([nz, ngal]) # compute P(z)
    for ii in range(nz):
        p_zbin[ii, :] = pzutils.p_in_zbin(allcen['PZ'], allcen['PZBINS'],
                                          zmin[ii], zmax[ii], verbose=False)

    lambins = legacyhalos.misc.get_lambdabins()
    lammin, lammax = lambins[:-1], lambins[1:]
    nlam = len(lammin)
    
    p_lambin = np.zeros([nlam, ngal]) # compute P(lambda)
    for jj in range(nlam):
        p_lambin[jj, :] = pzutils.p_in_lambdabin(lam, lam_err, lammin[jj], lammax[jj])

    # Require the total probability to be >1%
    rows = np.where( (np.sum(p_zbin, axis=0) > 1e-2) * (np.sum(p_lambin, axis=0) > 1e-2) )[0]

    if False:
        import matplotlib.pyplot as plt

        w1 = np.where( (np.sum(p_zbin, axis=0) > 1e-2) )[0]
        _ = plt.hist(allcen['Z_LAMBDA'], bins=100, range=(0, 0.6))
        _ = plt.hist(allcen['Z_LAMBDA'][w1], bins=100, range=(0, 0.6), alpha=0.5)
        plt.show()
    
        w2 = np.where( (np.sum(p_lambin, axis=0) > 1e-2) )[0]
        _ = plt.hist(np.log10(lam), bins=100, range=(-1, 2))
        _ = plt.hist(np.log10(lam[w2]), bins=100, range=(-1, 2), alpha=0.5)
        plt.show()

    # Old-school, hard cut-off way.
    #rows = np.where( (allcen['Z_LAMBDA'] >= 0.05) * (allcen['Z_LAMBDA'] <= 0.35) * (allcen['LAMBDA_CHISQ'] >= 10) )[0]
    cen = allcen[rows]

    print('Writing {}'.format(outfile))
    fitsio.write(outfile, cen, clobber=True)

    #area, duparea, pixmap = legacyhalos.misc.get_area(cen, qaplot=True)
    #print('Unique area = {:.3f} deg2\nOverlapping area = {:.3f} deg2'.format(area, duparea))

    write_mstarcat(prefix, args.dr, rows)
    print()

    # Candidate centrals--
    prefix = 'candidate-centrals'
    samplefile = os.path.join(sampledir, 'legacyhalos-{}-{}.fits'.format(prefix, args.dr))
    outfile = os.path.join(paper1dir, 'paper1-{}-{}.fits'.format(prefix, args.dr))

    allcand = fitsio.read(samplefile, ext=1)

    rows = np.where( np.isin( allcand['MEM_MATCH_ID'], cen['MEM_MATCH_ID'] ) )[0]
    cand = allcand[rows]
    print('Writing {}'.format(outfile))
    fitsio.write(outfile, cand, clobber=True)

    write_mstarcat(prefix, args.dr, rows)

if __name__ == '__main__':
    main()
