#!/usr/bin/env python

"""Generate the sample for the legacyhalos/profiles paper. 

build-profiles-sample --clobber

"""
import os, argparse
import numpy as np

import legacyhalos.io
import legacyhalos.misc

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--dr', type=str, default='dr8', help='Data release to analyze.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')

    args = parser.parse_args()

    outfile = os.path.join(legacyhalos.io.profiles_dir(), 'data', 'sample-profiles-{}.fits'.format(args.dr))
    if os.path.isfile(outfile) and not args.clobber:
        print('Output file {} exists; use clobber.'.format(outfile))
        return

    allcen = legacyhalos.io.read_redmapper()

    rows = np.where((allcen['P_CEN'][:, 0] > 0.9) *
                    (allcen['BCG_SPEC_Z'] != -1) * # require specz
                    (allcen['LAMBDA_CHISQ'] > 10) *
                    #(allcen['Z_LAMBDA'] >= 0.1) *
                    (allcen['Z_LAMBDA'] >= 0.1) *
                    (allcen['Z_LAMBDA'] <= 0.3))[0]
    cen = allcen[rows]

    # Temporary hack to write out a pilot sample of 1000 galaxies drawn
    # uniformly from halo mass.
    if False:
        npilot = 1000

        mhalo = np.log10(legacyhalos.misc.lambda2mhalo(cen['LAMBDA_CHISQ'], redshift=cen['Z_LAMBDA']))

        nbin = 20
        _xbin = np.linspace(mhalo.min(), mhalo.max(), nbin)
        idx  = np.digitize(mhalo, _xbin)

        prob = np.zeros_like(mhalo)
        for kk in range(nbin):
            ww = idx == kk
            if np.sum(ww) > 1:
                prob[ww] = 1 / np.sum(ww)
        prob /= np.sum(prob)

        rand = np.random.RandomState(seed=1)
        these = rand.choice(len(cen), npilot, p=prob, replace=False)
        srt = np.argsort(cen['MEM_MATCH_ID'][these])
        rows = rows[these[srt]]
        
        cen = cen[these[srt]]

    print('Writing {} / {} centrals to {}'.format(len(cen), len(allcen), outfile))
    cen.write(outfile, overwrite=True)
    
if __name__ == '__main__':
    main()
