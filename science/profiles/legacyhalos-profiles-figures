#!/usr/bin/env python
"""Generate the figures for Paper I (stellar mass density profiles).

"""
import os, sys, time, pdb
import argparse
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
        
import legacyhalos.io
from legacyhalos.legacyhalos import ZCOLUMN, RICHCOLUMN

figdir = os.path.join(legacyhalos.io.legacyhalos_dir(), 'science', 'profiles', 'figures')

def plot_style(font_scale=1.2, paper=False, talk=False):

    import seaborn as sns
    rc = {'font.family': 'serif'}#, 'text.usetex': True}
    #rc = {'font.family': 'serif', 'text.usetex': True,
    #       'text.latex.preamble': r'\boldmath'})
    palette, context = 'Set2', 'talk'
    
    if paper:
        context = 'paper'
        palette = 'deep'
        rc.update({'text.usetex': False})
    
    if talk:
        context = 'talk'
        palette = 'deep'
        #rc.update({'text.usetex': True})

    sns.set(context=context, style='ticks', font_scale=font_scale, rc=rc)
    sns.set_palette(palette, 12)

    colors = sns.color_palette()
    #sns.reset_orig()

    return sns, colors

def fig_richness_vs_redshift(sample, png=None):

    from legacyhalos.legacyhalos import lambda2mhalo

    sns, colors = plot_style(talk=True) # paper=True, font_scale=1.5)

    cmap = 'viridis' # 'RdYlBu'
    xmin, xmax = 0.1, 0.3
    ymin, ymax = np.log10(20), 2.2

    # Convert to a pandas dataframe to handle big vs little endian byte order.
    df = sample[ZCOLUMN, RICHCOLUMN].to_pandas()
    df[RICHCOLUMN] = np.log10(df[RICHCOLUMN])

    #fig, _ = plt.subplots(figsize=(12, 8))
    
    j = sns.jointplot(data=df, x=ZCOLUMN, y=RICHCOLUMN, kind='hex', #space=0, 
                      cmap=cmap, mincnt=1, bins='log', gridsize=25,
                      #height=8, 
                      xlim=(xmin, xmax), ylim=(ymin, ymax),
                      marginal_kws={'color': 'black', 'bins': 50})
    j.set_axis_labels('Redshift', r'$\log_{10}$ (Richness $\lambda$)')
    #j.ax_joint.axvline(x=0.05, color='k', lw=2, alpha=0.5)
    #j.ax_joint.axvline(x=0.6, color='k', lw=2, alpha=0.5)
    j.ax_joint.margins(5)
    j.ax_joint.xaxis.set_major_locator(ticker.MultipleLocator(0.05))
    #ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
    #j.ax_joint.set_yticklabels([])
    
    j.fig.set_figwidth(12)
    j.fig.set_figheight(9)
    j.fig.subplots_adjust(left=0.12, bottom=0.3, right=0.85, top=0.95)
    
    #ax.axhline(y=np.log10(5), ls='--', color='k')

    cax = j.fig.add_axes([0.12, 0.13, 0.6, 0.05])
    cb = plt.colorbar(orientation='horizontal', cax=cax)
    cb.set_label('Number of Galaxies')
    #cb.set_label(r'$\log_{10}$ (Number of Galaxies)')
    cb.set_ticks([2, 5, 10, 20, 40])
    cb.ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%g'))
    
    #cax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))
    #cb.set_ticks([10, 40])

    ax2 = j.ax_joint.twinx()
    ax2.spines['right'].set_position(('axes', 1.25))
    #ax2 = j.ax_marg_y.twinx()
    ax2.set_ylabel(r'$\log_{10}\, (\mathcal{M}_{200c}\, /\, \mathcal{M}_{\odot})$ at $z=0.2$')
    ax2.set_ylim(lambda2mhalo(10**ymin, redshift=0.2), lambda2mhalo(10**ymax, redshift=0.2))
    #ax2.set_yticklabels([])
    sns.despine(ax=ax2, left=True, right=False)

    if False:
        #ax2.set_yticks([])
        #ax2.plot([],[])
        ax2.spines['bottom'].set_color('white')

    if png:
        pngfile = os.path.join(figdir, png)
        print('Writing {}'.format(pngfile))
        j.fig.savefig(pngfile)#, bbox_inches='tight', pad_inches=0)

def fig_skysub_tests(sample, png=None):

    from legacyhalos.io import read_ellipsefit
    from legacyhalos.ellipse import ellipse_sbprofile    
    from legacyhalos.legacyhalos import get_galaxy_galaxydir, get_zbins, get_lambdabins

    zbins = get_zbins(verbose=True)
    lambdabins = get_lambdabins(verbose=True)

    #_zmin, _zmax = zbins.min().astype('f4'), zbins.max().astype('f4')
    #_lambdamin, _lambdamax = lambdabins.min().astype('f4'), lambdabins.max().astype('f4')

    #nz = np.round( (_zmax - _zmin) / dz ).astype('int')
    #zmin = np.linspace(_zmin, _zmax - dz, nz)
    #zmax = np.linspace(_zmin + dz, _zmax, nz)
    #
    #nlambda = np.round( (_lambdamax - _lambdamin) / dlambda ).astype('int')
    #lambdamin = np.linspace(_lambdamin, _lambdamax - dlambda, nlambda)
    #lambdamax = np.linspace(_lambdamin + dlambda, _lambdamax, nlambda)

    sns, colors = plot_style(talk=True) # paper=True, font_scale=1.5)

    fig, ax = plt.subplots(5, 4, figsize=(15, 15), sharey=True, sharex=True)
    #pdb.set_trace()

    for iz, (zmin, zmax) in enumerate(zip(zbins[:-1], zbins[1:])):
        print(zmin, zmax)
        for il, (lambdamin, lambdamax) in enumerate(zip(lambdabins[:-1], lambdabins[1:])):
            print(lambdamin, lambdamax)
            indx = np.where((sample[ZCOLUMN] >= zmin) * (sample[ZCOLUMN] < zmax) *
                            (sample[RICHCOLUMN] >= lambdamin) * (sample[RICHCOLUMN] < lambdamax))[0]
            if len(indx) > 0:
                for onegal in sample[indx][:3]:
                    galaxy, galaxydir = get_galaxy_galaxydir(onegal)

                    ellipsefit = read_ellipsefit(galaxy, galaxydir, filesuffix='custom',
                                                 galaxyid='', verbose=False)
                    if not bool(ellipsefit):
                        continue
                    sbprofile = ellipse_sbprofile(ellipsefit, linear=True)

                    band = 'r'
                    rad = sbprofile['radius_{}'.format(band)]**0.25
                    mu = sbprofile['mu_{}'.format(band)]
                    ax[il, iz].plot(rad, mu, alpha=0.7, label=galaxy)
                    #for iband, band in enumerate(ellipsefit['bands']):
                    #    rad = sbprofile['radius_{}'.format(band)]**0.25
                    #    mu = sbprofile['mu_{}'.format(band)]
                    #    ax[iz, il].plot(rad, mu, alpha=0.7, label=galaxy)

            #ax[il, iz].text(0.9, 0.9, r'${:.0g}<\lambda<{:.0g}$'.format(lambdamin, lambdamax),
            #                transform=ax[il, iz].transAxes, #fontweight='bold',
            #                ha='right', va='center', color='k', fontsize=16)


    for xx, zmin, zmax in zip(ax[0, :], zbins[:-1], zbins[1:]):
        xx.set_title(r'${:.2f}<z<{:.2f}$'.format(zmin, zmax))

    for xx, lambdamin, lambdamax in zip(ax[:, len(zbins)-2], lambdabins[:-1], lambdabins[1:]):
        x2 = xx.twinx()
        x2.set_ylabel(r'${:g}<\lambda<{:g}$'.format(lambdamin, lambdamax))
        x2.set_yticklabels([])

    for xx in ax.flat:
        #xx.text(0.9, 0.9, band, transform=xx.transAxes, #fontweight='bold',
        #       ha='center', va='center', color='k', fontsize=16)
        xx.set_ylim(-0.05, 0.2)
        xx.axhline(y=0, color='gray', lw=2, ls='--')
        xx.set_xlim(1.2, 3.5)

    #for xx, band in zip(ax, ['g', 'r', 'z']):
    #    xx.text(0.9, 0.9, band, transform=xx.transAxes, #fontweight='bold',
    #           ha='center', va='center', color='k', fontsize=16)
    #    xx.set_ylim(-0.05, 0.2)
    #    xx.axhline(y=0, color='k', lw=2)
    #    xx.set_xlim(1.2, 3.4)

    bigax = fig.add_subplot()
    bigax.set_frame_on(False)
    bigax.xaxis.set_ticks([])
    bigax.yaxis.set_ticks([])
    bigax.set_xticklabels([], visible=False)
    bigax.set_yticklabels([], visible=False)
    bigax.set_xlabel(r'Galactocentric radius $r^{1/4}$ (arcsec)', labelpad=40)
    bigax.set_ylabel(r'Surface Brightness (nanomaggy arcsec$^{-2}$)', labelpad=60)
    #bigax.set_ylabel(r'$\mu$ (nanomaggy arcsec$^{-2}$)', labelpad=60)

    plt.subplots_adjust(wspace=0.05, hspace=0.07, bottom=0.22, right=0.95, left=0.13)

    if png:
        pngfile = os.path.join(figdir, png)
        print('Writing {}'.format(pngfile))
        fig.savefig(pngfile)

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--skyplot', action='store_true')
    parser.add_argument('--richness-vs-redshift', action='store_true')
    parser.add_argument('--skysub-tests', action='store_true')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    # Fig 1 - distribution on the sky
    if args.skyplot:
        sample = legacyhalos.legacyhalos.read_redmapper()

    # Fig 2 - bivariate scatterplot of mass vs richness
    if args.richness_vs_redshift:
        sample = legacyhalos.legacyhalos.read_redmapper()
        fig_richness_vs_redshift(sample, png='richness_vs_redshift.png')

    # Fig 3 - sky subtraction diagnostic plots
    if args.skysub_tests:
        sample = legacyhalos.legacyhalos.read_redmapper()
        fig_skysub_tests(sample, png='skysub_tests.png')

if __name__ == '__main__':
    main()
